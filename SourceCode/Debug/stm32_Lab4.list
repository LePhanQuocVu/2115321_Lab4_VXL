
stm32_Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003534  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003640  08003640  00013640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036ec  080036ec  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080036ec  080036ec  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036ec  080036ec  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036ec  080036ec  000136ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036f0  080036f0  000136f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080036f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f4  20000084  08003778  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000478  08003778  00020478  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e393  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fc2  00000000  00000000  0002e440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00030408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  000310e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001809f  00000000  00000000  00031d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dbef  00000000  00000000  00049d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089cd4  00000000  00000000  0005798e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e1662  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bb8  00000000  00000000  000e16b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000084 	.word	0x20000084
 8000128:	00000000 	.word	0x00000000
 800012c:	08003628 	.word	0x08003628

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000088 	.word	0x20000088
 8000148:	08003628 	.word	0x08003628

0800014c <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 0 */

uint8_t rx_data;
	uint8_t tx_data[20]="STM32 Hello Man!!\r\n";

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
    if(huart->Instance == USART1){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a08      	ldr	r2, [pc, #32]	; (800017c <HAL_UART_RxCpltCallback+0x30>)
 800015a:	4293      	cmp	r3, r2
 800015c:	d10a      	bne.n	8000174 <HAL_UART_RxCpltCallback+0x28>
        HAL_UART_Transmit(&huart1,&rx_data,sizeof(rx_data), 100);
 800015e:	2364      	movs	r3, #100	; 0x64
 8000160:	2201      	movs	r2, #1
 8000162:	4907      	ldr	r1, [pc, #28]	; (8000180 <HAL_UART_RxCpltCallback+0x34>)
 8000164:	4807      	ldr	r0, [pc, #28]	; (8000184 <HAL_UART_RxCpltCallback+0x38>)
 8000166:	f001 ff43 	bl	8001ff0 <HAL_UART_Transmit>
        HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 800016a:	2201      	movs	r2, #1
 800016c:	4904      	ldr	r1, [pc, #16]	; (8000180 <HAL_UART_RxCpltCallback+0x34>)
 800016e:	4805      	ldr	r0, [pc, #20]	; (8000184 <HAL_UART_RxCpltCallback+0x38>)
 8000170:	f001 ffc1 	bl	80020f6 <HAL_UART_Receive_IT>
    }
}
 8000174:	bf00      	nop
 8000176:	3708      	adds	r7, #8
 8000178:	46bd      	mov	sp, r7
 800017a:	bd80      	pop	{r7, pc}
 800017c:	40013800 	.word	0x40013800
 8000180:	200000f8 	.word	0x200000f8
 8000184:	200000b0 	.word	0x200000b0

08000188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000188:	b580      	push	{r7, lr}
 800018a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800018c:	f000 fb36 	bl	80007fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000190:	f000 f82e 	bl	80001f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000194:	f000 f8de 	bl	8000354 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000198:	f000 f866 	bl	8000268 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800019c:	f000 f8b0 	bl	8000300 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80001a0:	480e      	ldr	r0, [pc, #56]	; (80001dc <main+0x54>)
 80001a2:	f001 fb3d 	bl	8001820 <HAL_TIM_Base_Start_IT>
//  SCH_Add_Task(led1test, 100, 500);




  HAL_UART_Transmit(&huart1,tx_data, sizeof(tx_data), 100);
 80001a6:	2364      	movs	r3, #100	; 0x64
 80001a8:	2214      	movs	r2, #20
 80001aa:	490d      	ldr	r1, [pc, #52]	; (80001e0 <main+0x58>)
 80001ac:	480d      	ldr	r0, [pc, #52]	; (80001e4 <main+0x5c>)
 80001ae:	f001 ff1f 	bl	8001ff0 <HAL_UART_Transmit>
    printf("STM32 hello from printf\r\n");
 80001b2:	480d      	ldr	r0, [pc, #52]	; (80001e8 <main+0x60>)
 80001b4:	f002 fde4 	bl	8002d80 <puts>
    HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 80001b8:	2201      	movs	r2, #1
 80001ba:	490c      	ldr	r1, [pc, #48]	; (80001ec <main+0x64>)
 80001bc:	4809      	ldr	r0, [pc, #36]	; (80001e4 <main+0x5c>)
 80001be:	f001 ff9a 	bl	80020f6 <HAL_UART_Receive_IT>
  while (1)
  {
//	  SCH_Dispatch_Tasks();
//
	  	  HAL_UART_Transmit(&huart1,tx_data, sizeof(tx_data), 100);
 80001c2:	2364      	movs	r3, #100	; 0x64
 80001c4:	2214      	movs	r2, #20
 80001c6:	4906      	ldr	r1, [pc, #24]	; (80001e0 <main+0x58>)
 80001c8:	4806      	ldr	r0, [pc, #24]	; (80001e4 <main+0x5c>)
 80001ca:	f001 ff11 	bl	8001ff0 <HAL_UART_Transmit>
	    HAL_UART_Receive_IT(&huart1, &rx_data, 1);
 80001ce:	2201      	movs	r2, #1
 80001d0:	4906      	ldr	r1, [pc, #24]	; (80001ec <main+0x64>)
 80001d2:	4804      	ldr	r0, [pc, #16]	; (80001e4 <main+0x5c>)
 80001d4:	f001 ff8f 	bl	80020f6 <HAL_UART_Receive_IT>
	  	  HAL_UART_Transmit(&huart1,tx_data, sizeof(tx_data), 100);
 80001d8:	e7f3      	b.n	80001c2 <main+0x3a>
 80001da:	bf00      	nop
 80001dc:	200000fc 	.word	0x200000fc
 80001e0:	20000000 	.word	0x20000000
 80001e4:	200000b0 	.word	0x200000b0
 80001e8:	08003640 	.word	0x08003640
 80001ec:	200000f8 	.word	0x200000f8

080001f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b090      	sub	sp, #64	; 0x40
 80001f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f6:	f107 0318 	add.w	r3, r7, #24
 80001fa:	2228      	movs	r2, #40	; 0x28
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f002 fd48 	bl	8002c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000204:	1d3b      	adds	r3, r7, #4
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	605a      	str	r2, [r3, #4]
 800020c:	609a      	str	r2, [r3, #8]
 800020e:	60da      	str	r2, [r3, #12]
 8000210:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000212:	2302      	movs	r3, #2
 8000214:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000216:	2301      	movs	r3, #1
 8000218:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800021a:	2310      	movs	r3, #16
 800021c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800021e:	2300      	movs	r3, #0
 8000220:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000222:	f107 0318 	add.w	r3, r7, #24
 8000226:	4618      	mov	r0, r3
 8000228:	f000 fe9c 	bl	8000f64 <HAL_RCC_OscConfig>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000232:	f000 f8cb 	bl	80003cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000236:	230f      	movs	r3, #15
 8000238:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800023a:	2300      	movs	r3, #0
 800023c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800023e:	2300      	movs	r3, #0
 8000240:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000242:	2300      	movs	r3, #0
 8000244:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f001 f908 	bl	8001464 <HAL_RCC_ClockConfig>
 8000254:	4603      	mov	r3, r0
 8000256:	2b00      	cmp	r3, #0
 8000258:	d001      	beq.n	800025e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800025a:	f000 f8b7 	bl	80003cc <Error_Handler>
  }
}
 800025e:	bf00      	nop
 8000260:	3740      	adds	r7, #64	; 0x40
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
	...

08000268 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b086      	sub	sp, #24
 800026c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800026e:	f107 0308 	add.w	r3, r7, #8
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800027c:	463b      	mov	r3, r7
 800027e:	2200      	movs	r2, #0
 8000280:	601a      	str	r2, [r3, #0]
 8000282:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000284:	4b1d      	ldr	r3, [pc, #116]	; (80002fc <MX_TIM2_Init+0x94>)
 8000286:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800028a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 800028c:	4b1b      	ldr	r3, [pc, #108]	; (80002fc <MX_TIM2_Init+0x94>)
 800028e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000292:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000294:	4b19      	ldr	r3, [pc, #100]	; (80002fc <MX_TIM2_Init+0x94>)
 8000296:	2200      	movs	r2, #0
 8000298:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800029a:	4b18      	ldr	r3, [pc, #96]	; (80002fc <MX_TIM2_Init+0x94>)
 800029c:	2209      	movs	r2, #9
 800029e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002a0:	4b16      	ldr	r3, [pc, #88]	; (80002fc <MX_TIM2_Init+0x94>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002a6:	4b15      	ldr	r3, [pc, #84]	; (80002fc <MX_TIM2_Init+0x94>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80002ac:	4813      	ldr	r0, [pc, #76]	; (80002fc <MX_TIM2_Init+0x94>)
 80002ae:	f001 fa67 	bl	8001780 <HAL_TIM_Base_Init>
 80002b2:	4603      	mov	r3, r0
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d001      	beq.n	80002bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80002b8:	f000 f888 	bl	80003cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80002c2:	f107 0308 	add.w	r3, r7, #8
 80002c6:	4619      	mov	r1, r3
 80002c8:	480c      	ldr	r0, [pc, #48]	; (80002fc <MX_TIM2_Init+0x94>)
 80002ca:	f001 fbfd 	bl	8001ac8 <HAL_TIM_ConfigClockSource>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80002d4:	f000 f87a 	bl	80003cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80002d8:	2300      	movs	r3, #0
 80002da:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80002dc:	2300      	movs	r3, #0
 80002de:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80002e0:	463b      	mov	r3, r7
 80002e2:	4619      	mov	r1, r3
 80002e4:	4805      	ldr	r0, [pc, #20]	; (80002fc <MX_TIM2_Init+0x94>)
 80002e6:	f001 fdc9 	bl	8001e7c <HAL_TIMEx_MasterConfigSynchronization>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d001      	beq.n	80002f4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80002f0:	f000 f86c 	bl	80003cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80002f4:	bf00      	nop
 80002f6:	3718      	adds	r7, #24
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	200000fc 	.word	0x200000fc

08000300 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000304:	4b11      	ldr	r3, [pc, #68]	; (800034c <MX_USART1_UART_Init+0x4c>)
 8000306:	4a12      	ldr	r2, [pc, #72]	; (8000350 <MX_USART1_UART_Init+0x50>)
 8000308:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800030a:	4b10      	ldr	r3, [pc, #64]	; (800034c <MX_USART1_UART_Init+0x4c>)
 800030c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000310:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000312:	4b0e      	ldr	r3, [pc, #56]	; (800034c <MX_USART1_UART_Init+0x4c>)
 8000314:	2200      	movs	r2, #0
 8000316:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000318:	4b0c      	ldr	r3, [pc, #48]	; (800034c <MX_USART1_UART_Init+0x4c>)
 800031a:	2200      	movs	r2, #0
 800031c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800031e:	4b0b      	ldr	r3, [pc, #44]	; (800034c <MX_USART1_UART_Init+0x4c>)
 8000320:	2200      	movs	r2, #0
 8000322:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000324:	4b09      	ldr	r3, [pc, #36]	; (800034c <MX_USART1_UART_Init+0x4c>)
 8000326:	220c      	movs	r2, #12
 8000328:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800032a:	4b08      	ldr	r3, [pc, #32]	; (800034c <MX_USART1_UART_Init+0x4c>)
 800032c:	2200      	movs	r2, #0
 800032e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000330:	4b06      	ldr	r3, [pc, #24]	; (800034c <MX_USART1_UART_Init+0x4c>)
 8000332:	2200      	movs	r2, #0
 8000334:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000336:	4805      	ldr	r0, [pc, #20]	; (800034c <MX_USART1_UART_Init+0x4c>)
 8000338:	f001 fe0a 	bl	8001f50 <HAL_UART_Init>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000342:	f000 f843 	bl	80003cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	200000b0 	.word	0x200000b0
 8000350:	40013800 	.word	0x40013800

08000354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b086      	sub	sp, #24
 8000358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800035a:	f107 0308 	add.w	r3, r7, #8
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	605a      	str	r2, [r3, #4]
 8000364:	609a      	str	r2, [r3, #8]
 8000366:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000368:	4b11      	ldr	r3, [pc, #68]	; (80003b0 <MX_GPIO_Init+0x5c>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a10      	ldr	r2, [pc, #64]	; (80003b0 <MX_GPIO_Init+0x5c>)
 800036e:	f043 0304 	orr.w	r3, r3, #4
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <MX_GPIO_Init+0x5c>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f003 0304 	and.w	r3, r3, #4
 800037c:	607b      	str	r3, [r7, #4]
 800037e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_red_Pin|Task0_Pin|Task1_Pin|Task2_Pin
 8000380:	2200      	movs	r2, #0
 8000382:	21fc      	movs	r1, #252	; 0xfc
 8000384:	480b      	ldr	r0, [pc, #44]	; (80003b4 <MX_GPIO_Init+0x60>)
 8000386:	f000 fdd5 	bl	8000f34 <HAL_GPIO_WritePin>
                          |Task3_Pin|Task4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Led_red_Pin Task0_Pin Task1_Pin Task2_Pin
                           Task3_Pin Task4_Pin */
  GPIO_InitStruct.Pin = Led_red_Pin|Task0_Pin|Task1_Pin|Task2_Pin
 800038a:	23fc      	movs	r3, #252	; 0xfc
 800038c:	60bb      	str	r3, [r7, #8]
                          |Task3_Pin|Task4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800038e:	2301      	movs	r3, #1
 8000390:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000392:	2300      	movs	r3, #0
 8000394:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000396:	2302      	movs	r3, #2
 8000398:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039a:	f107 0308 	add.w	r3, r7, #8
 800039e:	4619      	mov	r1, r3
 80003a0:	4804      	ldr	r0, [pc, #16]	; (80003b4 <MX_GPIO_Init+0x60>)
 80003a2:	f000 fc4d 	bl	8000c40 <HAL_GPIO_Init>

}
 80003a6:	bf00      	nop
 80003a8:	3718      	adds	r7, #24
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40021000 	.word	0x40021000
 80003b4:	40010800 	.word	0x40010800

080003b8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	SCH_Update();
 80003c0:	f000 f80a 	bl	80003d8 <SCH_Update>
}
 80003c4:	bf00      	nop
 80003c6:	3708      	adds	r7, #8
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}

080003cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d0:	b672      	cpsid	i
}
 80003d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003d4:	e7fe      	b.n	80003d4 <Error_Handler+0x8>
	...

080003d8 <SCH_Update>:
		SCH_tasks_G[current_index_task].TaskID = current_index_task;
		current_index_task++;
	}
}

void SCH_Update(void) {
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
	for(int i=0; i < current_index_task; i++) {
 80003de:	2300      	movs	r3, #0
 80003e0:	607b      	str	r3, [r7, #4]
 80003e2:	e048      	b.n	8000476 <SCH_Update+0x9e>
		if(SCH_tasks_G[i].Delay > 0) {
 80003e4:	492a      	ldr	r1, [pc, #168]	; (8000490 <SCH_Update+0xb8>)
 80003e6:	687a      	ldr	r2, [r7, #4]
 80003e8:	4613      	mov	r3, r2
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	4413      	add	r3, r2
 80003ee:	009b      	lsls	r3, r3, #2
 80003f0:	440b      	add	r3, r1
 80003f2:	3304      	adds	r3, #4
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d013      	beq.n	8000422 <SCH_Update+0x4a>
			SCH_tasks_G[i].Delay--;
 80003fa:	4925      	ldr	r1, [pc, #148]	; (8000490 <SCH_Update+0xb8>)
 80003fc:	687a      	ldr	r2, [r7, #4]
 80003fe:	4613      	mov	r3, r2
 8000400:	009b      	lsls	r3, r3, #2
 8000402:	4413      	add	r3, r2
 8000404:	009b      	lsls	r3, r3, #2
 8000406:	440b      	add	r3, r1
 8000408:	3304      	adds	r3, #4
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	1e59      	subs	r1, r3, #1
 800040e:	4820      	ldr	r0, [pc, #128]	; (8000490 <SCH_Update+0xb8>)
 8000410:	687a      	ldr	r2, [r7, #4]
 8000412:	4613      	mov	r3, r2
 8000414:	009b      	lsls	r3, r3, #2
 8000416:	4413      	add	r3, r2
 8000418:	009b      	lsls	r3, r3, #2
 800041a:	4403      	add	r3, r0
 800041c:	3304      	adds	r3, #4
 800041e:	6019      	str	r1, [r3, #0]
 8000420:	e026      	b.n	8000470 <SCH_Update+0x98>
		} else {
			SCH_tasks_G[i].Delay = SCH_tasks_G[i].Period;
 8000422:	491b      	ldr	r1, [pc, #108]	; (8000490 <SCH_Update+0xb8>)
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	4613      	mov	r3, r2
 8000428:	009b      	lsls	r3, r3, #2
 800042a:	4413      	add	r3, r2
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	440b      	add	r3, r1
 8000430:	3308      	adds	r3, #8
 8000432:	6819      	ldr	r1, [r3, #0]
 8000434:	4816      	ldr	r0, [pc, #88]	; (8000490 <SCH_Update+0xb8>)
 8000436:	687a      	ldr	r2, [r7, #4]
 8000438:	4613      	mov	r3, r2
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	4413      	add	r3, r2
 800043e:	009b      	lsls	r3, r3, #2
 8000440:	4403      	add	r3, r0
 8000442:	3304      	adds	r3, #4
 8000444:	6019      	str	r1, [r3, #0]
			SCH_tasks_G[i].RunMe += 1;
 8000446:	4912      	ldr	r1, [pc, #72]	; (8000490 <SCH_Update+0xb8>)
 8000448:	687a      	ldr	r2, [r7, #4]
 800044a:	4613      	mov	r3, r2
 800044c:	009b      	lsls	r3, r3, #2
 800044e:	4413      	add	r3, r2
 8000450:	009b      	lsls	r3, r3, #2
 8000452:	440b      	add	r3, r1
 8000454:	330c      	adds	r3, #12
 8000456:	781b      	ldrb	r3, [r3, #0]
 8000458:	3301      	adds	r3, #1
 800045a:	b2d8      	uxtb	r0, r3
 800045c:	490c      	ldr	r1, [pc, #48]	; (8000490 <SCH_Update+0xb8>)
 800045e:	687a      	ldr	r2, [r7, #4]
 8000460:	4613      	mov	r3, r2
 8000462:	009b      	lsls	r3, r3, #2
 8000464:	4413      	add	r3, r2
 8000466:	009b      	lsls	r3, r3, #2
 8000468:	440b      	add	r3, r1
 800046a:	330c      	adds	r3, #12
 800046c:	4602      	mov	r2, r0
 800046e:	701a      	strb	r2, [r3, #0]
	for(int i=0; i < current_index_task; i++) {
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	3301      	adds	r3, #1
 8000474:	607b      	str	r3, [r7, #4]
 8000476:	4b07      	ldr	r3, [pc, #28]	; (8000494 <SCH_Update+0xbc>)
 8000478:	781b      	ldrb	r3, [r3, #0]
 800047a:	461a      	mov	r2, r3
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4293      	cmp	r3, r2
 8000480:	dbb0      	blt.n	80003e4 <SCH_Update+0xc>
		}
	}
}
 8000482:	bf00      	nop
 8000484:	bf00      	nop
 8000486:	370c      	adds	r7, #12
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	20000144 	.word	0x20000144
 8000494:	200000a0 	.word	0x200000a0

08000498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000498:	b480      	push	{r7}
 800049a:	b085      	sub	sp, #20
 800049c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800049e:	4b15      	ldr	r3, [pc, #84]	; (80004f4 <HAL_MspInit+0x5c>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	4a14      	ldr	r2, [pc, #80]	; (80004f4 <HAL_MspInit+0x5c>)
 80004a4:	f043 0301 	orr.w	r3, r3, #1
 80004a8:	6193      	str	r3, [r2, #24]
 80004aa:	4b12      	ldr	r3, [pc, #72]	; (80004f4 <HAL_MspInit+0x5c>)
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	f003 0301 	and.w	r3, r3, #1
 80004b2:	60bb      	str	r3, [r7, #8]
 80004b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004b6:	4b0f      	ldr	r3, [pc, #60]	; (80004f4 <HAL_MspInit+0x5c>)
 80004b8:	69db      	ldr	r3, [r3, #28]
 80004ba:	4a0e      	ldr	r2, [pc, #56]	; (80004f4 <HAL_MspInit+0x5c>)
 80004bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004c0:	61d3      	str	r3, [r2, #28]
 80004c2:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <HAL_MspInit+0x5c>)
 80004c4:	69db      	ldr	r3, [r3, #28]
 80004c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ca:	607b      	str	r3, [r7, #4]
 80004cc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80004ce:	4b0a      	ldr	r3, [pc, #40]	; (80004f8 <HAL_MspInit+0x60>)
 80004d0:	685b      	ldr	r3, [r3, #4]
 80004d2:	60fb      	str	r3, [r7, #12]
 80004d4:	68fb      	ldr	r3, [r7, #12]
 80004d6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004da:	60fb      	str	r3, [r7, #12]
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80004e2:	60fb      	str	r3, [r7, #12]
 80004e4:	4a04      	ldr	r2, [pc, #16]	; (80004f8 <HAL_MspInit+0x60>)
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004ea:	bf00      	nop
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr
 80004f4:	40021000 	.word	0x40021000
 80004f8:	40010000 	.word	0x40010000

080004fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800050c:	d113      	bne.n	8000536 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800050e:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <HAL_TIM_Base_MspInit+0x44>)
 8000510:	69db      	ldr	r3, [r3, #28]
 8000512:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <HAL_TIM_Base_MspInit+0x44>)
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	61d3      	str	r3, [r2, #28]
 800051a:	4b09      	ldr	r3, [pc, #36]	; (8000540 <HAL_TIM_Base_MspInit+0x44>)
 800051c:	69db      	ldr	r3, [r3, #28]
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	2100      	movs	r1, #0
 800052a:	201c      	movs	r0, #28
 800052c:	f000 fa9f 	bl	8000a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000530:	201c      	movs	r0, #28
 8000532:	f000 fab8 	bl	8000aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000536:	bf00      	nop
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40021000 	.word	0x40021000

08000544 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800054c:	f107 0310 	add.w	r3, r7, #16
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a20      	ldr	r2, [pc, #128]	; (80005e0 <HAL_UART_MspInit+0x9c>)
 8000560:	4293      	cmp	r3, r2
 8000562:	d139      	bne.n	80005d8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000564:	4b1f      	ldr	r3, [pc, #124]	; (80005e4 <HAL_UART_MspInit+0xa0>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	4a1e      	ldr	r2, [pc, #120]	; (80005e4 <HAL_UART_MspInit+0xa0>)
 800056a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800056e:	6193      	str	r3, [r2, #24]
 8000570:	4b1c      	ldr	r3, [pc, #112]	; (80005e4 <HAL_UART_MspInit+0xa0>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000578:	60fb      	str	r3, [r7, #12]
 800057a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800057c:	4b19      	ldr	r3, [pc, #100]	; (80005e4 <HAL_UART_MspInit+0xa0>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a18      	ldr	r2, [pc, #96]	; (80005e4 <HAL_UART_MspInit+0xa0>)
 8000582:	f043 0304 	orr.w	r3, r3, #4
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <HAL_UART_MspInit+0xa0>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f003 0304 	and.w	r3, r3, #4
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000594:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000598:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800059a:	2302      	movs	r3, #2
 800059c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800059e:	2303      	movs	r3, #3
 80005a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005a2:	f107 0310 	add.w	r3, r7, #16
 80005a6:	4619      	mov	r1, r3
 80005a8:	480f      	ldr	r0, [pc, #60]	; (80005e8 <HAL_UART_MspInit+0xa4>)
 80005aa:	f000 fb49 	bl	8000c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005bc:	f107 0310 	add.w	r3, r7, #16
 80005c0:	4619      	mov	r1, r3
 80005c2:	4809      	ldr	r0, [pc, #36]	; (80005e8 <HAL_UART_MspInit+0xa4>)
 80005c4:	f000 fb3c 	bl	8000c40 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2100      	movs	r1, #0
 80005cc:	2025      	movs	r0, #37	; 0x25
 80005ce:	f000 fa4e 	bl	8000a6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80005d2:	2025      	movs	r0, #37	; 0x25
 80005d4:	f000 fa67 	bl	8000aa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80005d8:	bf00      	nop
 80005da:	3720      	adds	r7, #32
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40013800 	.word	0x40013800
 80005e4:	40021000 	.word	0x40021000
 80005e8:	40010800 	.word	0x40010800

080005ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005f0:	e7fe      	b.n	80005f0 <NMI_Handler+0x4>

080005f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005f2:	b480      	push	{r7}
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005f6:	e7fe      	b.n	80005f6 <HardFault_Handler+0x4>

080005f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <MemManage_Handler+0x4>

080005fe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000602:	e7fe      	b.n	8000602 <BusFault_Handler+0x4>

08000604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000608:	e7fe      	b.n	8000608 <UsageFault_Handler+0x4>

0800060a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800060e:	bf00      	nop
 8000610:	46bd      	mov	sp, r7
 8000612:	bc80      	pop	{r7}
 8000614:	4770      	bx	lr

08000616 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800061a:	bf00      	nop
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr

08000622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000622:	b480      	push	{r7}
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000626:	bf00      	nop
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr

0800062e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800062e:	b580      	push	{r7, lr}
 8000630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000632:	f000 f929 	bl	8000888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
	...

0800063c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000640:	4802      	ldr	r0, [pc, #8]	; (800064c <TIM2_IRQHandler+0x10>)
 8000642:	f001 f939 	bl	80018b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200000fc 	.word	0x200000fc

08000650 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000654:	4802      	ldr	r0, [pc, #8]	; (8000660 <USART1_IRQHandler+0x10>)
 8000656:	f001 fd73 	bl	8002140 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	200000b0 	.word	0x200000b0

08000664 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
 800066a:	60f8      	str	r0, [r7, #12]
 800066c:	60b9      	str	r1, [r7, #8]
 800066e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
 8000674:	e00a      	b.n	800068c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000676:	f3af 8000 	nop.w
 800067a:	4601      	mov	r1, r0
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	1c5a      	adds	r2, r3, #1
 8000680:	60ba      	str	r2, [r7, #8]
 8000682:	b2ca      	uxtb	r2, r1
 8000684:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	3301      	adds	r3, #1
 800068a:	617b      	str	r3, [r7, #20]
 800068c:	697a      	ldr	r2, [r7, #20]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	429a      	cmp	r2, r3
 8000692:	dbf0      	blt.n	8000676 <_read+0x12>
	}

return len;
 8000694:	687b      	ldr	r3, [r7, #4]
}
 8000696:	4618      	mov	r0, r3
 8000698:	3718      	adds	r7, #24
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}

0800069e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	b086      	sub	sp, #24
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	60f8      	str	r0, [r7, #12]
 80006a6:	60b9      	str	r1, [r7, #8]
 80006a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006aa:	2300      	movs	r3, #0
 80006ac:	617b      	str	r3, [r7, #20]
 80006ae:	e009      	b.n	80006c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	1c5a      	adds	r2, r3, #1
 80006b4:	60ba      	str	r2, [r7, #8]
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	4618      	mov	r0, r3
 80006ba:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	3301      	adds	r3, #1
 80006c2:	617b      	str	r3, [r7, #20]
 80006c4:	697a      	ldr	r2, [r7, #20]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	dbf1      	blt.n	80006b0 <_write+0x12>
	}
	return len;
 80006cc:	687b      	ldr	r3, [r7, #4]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3718      	adds	r7, #24
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <_close>:

int _close(int file)
{
 80006d6:	b480      	push	{r7}
 80006d8:	b083      	sub	sp, #12
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
	return -1;
 80006de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr

080006ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006fc:	605a      	str	r2, [r3, #4]
	return 0;
 80006fe:	2300      	movs	r3, #0
}
 8000700:	4618      	mov	r0, r3
 8000702:	370c      	adds	r7, #12
 8000704:	46bd      	mov	sp, r7
 8000706:	bc80      	pop	{r7}
 8000708:	4770      	bx	lr

0800070a <_isatty>:

int _isatty(int file)
{
 800070a:	b480      	push	{r7}
 800070c:	b083      	sub	sp, #12
 800070e:	af00      	add	r7, sp, #0
 8000710:	6078      	str	r0, [r7, #4]
	return 1;
 8000712:	2301      	movs	r3, #1
}
 8000714:	4618      	mov	r0, r3
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	bc80      	pop	{r7}
 800071c:	4770      	bx	lr

0800071e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800071e:	b480      	push	{r7}
 8000720:	b085      	sub	sp, #20
 8000722:	af00      	add	r7, sp, #0
 8000724:	60f8      	str	r0, [r7, #12]
 8000726:	60b9      	str	r1, [r7, #8]
 8000728:	607a      	str	r2, [r7, #4]
	return 0;
 800072a:	2300      	movs	r3, #0
}
 800072c:	4618      	mov	r0, r3
 800072e:	3714      	adds	r7, #20
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr
	...

08000738 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000740:	4a14      	ldr	r2, [pc, #80]	; (8000794 <_sbrk+0x5c>)
 8000742:	4b15      	ldr	r3, [pc, #84]	; (8000798 <_sbrk+0x60>)
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800074c:	4b13      	ldr	r3, [pc, #76]	; (800079c <_sbrk+0x64>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d102      	bne.n	800075a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <_sbrk+0x64>)
 8000756:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <_sbrk+0x68>)
 8000758:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <_sbrk+0x64>)
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4413      	add	r3, r2
 8000762:	693a      	ldr	r2, [r7, #16]
 8000764:	429a      	cmp	r2, r3
 8000766:	d207      	bcs.n	8000778 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000768:	f002 fa6a 	bl	8002c40 <__errno>
 800076c:	4603      	mov	r3, r0
 800076e:	220c      	movs	r2, #12
 8000770:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000772:	f04f 33ff 	mov.w	r3, #4294967295
 8000776:	e009      	b.n	800078c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <_sbrk+0x64>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800077e:	4b07      	ldr	r3, [pc, #28]	; (800079c <_sbrk+0x64>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4413      	add	r3, r2
 8000786:	4a05      	ldr	r2, [pc, #20]	; (800079c <_sbrk+0x64>)
 8000788:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800078a:	68fb      	ldr	r3, [r7, #12]
}
 800078c:	4618      	mov	r0, r3
 800078e:	3718      	adds	r7, #24
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	20002800 	.word	0x20002800
 8000798:	00000400 	.word	0x00000400
 800079c:	200000a4 	.word	0x200000a4
 80007a0:	20000478 	.word	0x20000478

080007a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr

080007b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007b0:	f7ff fff8 	bl	80007a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007b4:	480b      	ldr	r0, [pc, #44]	; (80007e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007b6:	490c      	ldr	r1, [pc, #48]	; (80007e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007b8:	4a0c      	ldr	r2, [pc, #48]	; (80007ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007bc:	e002      	b.n	80007c4 <LoopCopyDataInit>

080007be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007c2:	3304      	adds	r3, #4

080007c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007c8:	d3f9      	bcc.n	80007be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ca:	4a09      	ldr	r2, [pc, #36]	; (80007f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007cc:	4c09      	ldr	r4, [pc, #36]	; (80007f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d0:	e001      	b.n	80007d6 <LoopFillZerobss>

080007d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007d4:	3204      	adds	r2, #4

080007d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007d8:	d3fb      	bcc.n	80007d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007da:	f002 fa37 	bl	8002c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007de:	f7ff fcd3 	bl	8000188 <main>
  bx lr
 80007e2:	4770      	bx	lr
  ldr r0, =_sdata
 80007e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007e8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80007ec:	080036f4 	.word	0x080036f4
  ldr r2, =_sbss
 80007f0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80007f4:	20000478 	.word	0x20000478

080007f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007f8:	e7fe      	b.n	80007f8 <ADC1_2_IRQHandler>
	...

080007fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000800:	4b08      	ldr	r3, [pc, #32]	; (8000824 <HAL_Init+0x28>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a07      	ldr	r2, [pc, #28]	; (8000824 <HAL_Init+0x28>)
 8000806:	f043 0310 	orr.w	r3, r3, #16
 800080a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800080c:	2003      	movs	r0, #3
 800080e:	f000 f923 	bl	8000a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000812:	200f      	movs	r0, #15
 8000814:	f000 f808 	bl	8000828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000818:	f7ff fe3e 	bl	8000498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800081c:	2300      	movs	r3, #0
}
 800081e:	4618      	mov	r0, r3
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40022000 	.word	0x40022000

08000828 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <HAL_InitTick+0x54>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <HAL_InitTick+0x58>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	4619      	mov	r1, r3
 800083a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800083e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000842:	fbb2 f3f3 	udiv	r3, r2, r3
 8000846:	4618      	mov	r0, r3
 8000848:	f000 f93b 	bl	8000ac2 <HAL_SYSTICK_Config>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000852:	2301      	movs	r3, #1
 8000854:	e00e      	b.n	8000874 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2b0f      	cmp	r3, #15
 800085a:	d80a      	bhi.n	8000872 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800085c:	2200      	movs	r2, #0
 800085e:	6879      	ldr	r1, [r7, #4]
 8000860:	f04f 30ff 	mov.w	r0, #4294967295
 8000864:	f000 f903 	bl	8000a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000868:	4a06      	ldr	r2, [pc, #24]	; (8000884 <HAL_InitTick+0x5c>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800086e:	2300      	movs	r3, #0
 8000870:	e000      	b.n	8000874 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000872:	2301      	movs	r3, #1
}
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000014 	.word	0x20000014
 8000880:	2000001c 	.word	0x2000001c
 8000884:	20000018 	.word	0x20000018

08000888 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800088c:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <HAL_IncTick+0x1c>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	461a      	mov	r2, r3
 8000892:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <HAL_IncTick+0x20>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4413      	add	r3, r2
 8000898:	4a03      	ldr	r2, [pc, #12]	; (80008a8 <HAL_IncTick+0x20>)
 800089a:	6013      	str	r3, [r2, #0]
}
 800089c:	bf00      	nop
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr
 80008a4:	2000001c 	.word	0x2000001c
 80008a8:	20000464 	.word	0x20000464

080008ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  return uwTick;
 80008b0:	4b02      	ldr	r3, [pc, #8]	; (80008bc <HAL_GetTick+0x10>)
 80008b2:	681b      	ldr	r3, [r3, #0]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bc80      	pop	{r7}
 80008ba:	4770      	bx	lr
 80008bc:	20000464 	.word	0x20000464

080008c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f003 0307 	and.w	r3, r3, #7
 80008ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <__NVIC_SetPriorityGrouping+0x44>)
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008dc:	4013      	ands	r3, r2
 80008de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008f2:	4a04      	ldr	r2, [pc, #16]	; (8000904 <__NVIC_SetPriorityGrouping+0x44>)
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	60d3      	str	r3, [r2, #12]
}
 80008f8:	bf00      	nop
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800090c:	4b04      	ldr	r3, [pc, #16]	; (8000920 <__NVIC_GetPriorityGrouping+0x18>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	0a1b      	lsrs	r3, r3, #8
 8000912:	f003 0307 	and.w	r3, r3, #7
}
 8000916:	4618      	mov	r0, r3
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800092e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000932:	2b00      	cmp	r3, #0
 8000934:	db0b      	blt.n	800094e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	f003 021f 	and.w	r2, r3, #31
 800093c:	4906      	ldr	r1, [pc, #24]	; (8000958 <__NVIC_EnableIRQ+0x34>)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	095b      	lsrs	r3, r3, #5
 8000944:	2001      	movs	r0, #1
 8000946:	fa00 f202 	lsl.w	r2, r0, r2
 800094a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	bc80      	pop	{r7}
 8000956:	4770      	bx	lr
 8000958:	e000e100 	.word	0xe000e100

0800095c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	6039      	str	r1, [r7, #0]
 8000966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096c:	2b00      	cmp	r3, #0
 800096e:	db0a      	blt.n	8000986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	b2da      	uxtb	r2, r3
 8000974:	490c      	ldr	r1, [pc, #48]	; (80009a8 <__NVIC_SetPriority+0x4c>)
 8000976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800097a:	0112      	lsls	r2, r2, #4
 800097c:	b2d2      	uxtb	r2, r2
 800097e:	440b      	add	r3, r1
 8000980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000984:	e00a      	b.n	800099c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	b2da      	uxtb	r2, r3
 800098a:	4908      	ldr	r1, [pc, #32]	; (80009ac <__NVIC_SetPriority+0x50>)
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	f003 030f 	and.w	r3, r3, #15
 8000992:	3b04      	subs	r3, #4
 8000994:	0112      	lsls	r2, r2, #4
 8000996:	b2d2      	uxtb	r2, r2
 8000998:	440b      	add	r3, r1
 800099a:	761a      	strb	r2, [r3, #24]
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bc80      	pop	{r7}
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000e100 	.word	0xe000e100
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b089      	sub	sp, #36	; 0x24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f003 0307 	and.w	r3, r3, #7
 80009c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009c4:	69fb      	ldr	r3, [r7, #28]
 80009c6:	f1c3 0307 	rsb	r3, r3, #7
 80009ca:	2b04      	cmp	r3, #4
 80009cc:	bf28      	it	cs
 80009ce:	2304      	movcs	r3, #4
 80009d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	3304      	adds	r3, #4
 80009d6:	2b06      	cmp	r3, #6
 80009d8:	d902      	bls.n	80009e0 <NVIC_EncodePriority+0x30>
 80009da:	69fb      	ldr	r3, [r7, #28]
 80009dc:	3b03      	subs	r3, #3
 80009de:	e000      	b.n	80009e2 <NVIC_EncodePriority+0x32>
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e4:	f04f 32ff 	mov.w	r2, #4294967295
 80009e8:	69bb      	ldr	r3, [r7, #24]
 80009ea:	fa02 f303 	lsl.w	r3, r2, r3
 80009ee:	43da      	mvns	r2, r3
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	401a      	ands	r2, r3
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009f8:	f04f 31ff 	mov.w	r1, #4294967295
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000a02:	43d9      	mvns	r1, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a08:	4313      	orrs	r3, r2
         );
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3724      	adds	r7, #36	; 0x24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr

08000a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a24:	d301      	bcc.n	8000a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a26:	2301      	movs	r3, #1
 8000a28:	e00f      	b.n	8000a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <SysTick_Config+0x40>)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3b01      	subs	r3, #1
 8000a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a32:	210f      	movs	r1, #15
 8000a34:	f04f 30ff 	mov.w	r0, #4294967295
 8000a38:	f7ff ff90 	bl	800095c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <SysTick_Config+0x40>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a42:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <SysTick_Config+0x40>)
 8000a44:	2207      	movs	r2, #7
 8000a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	e000e010 	.word	0xe000e010

08000a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f7ff ff2d 	bl	80008c0 <__NVIC_SetPriorityGrouping>
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b086      	sub	sp, #24
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	4603      	mov	r3, r0
 8000a76:	60b9      	str	r1, [r7, #8]
 8000a78:	607a      	str	r2, [r7, #4]
 8000a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a80:	f7ff ff42 	bl	8000908 <__NVIC_GetPriorityGrouping>
 8000a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	68b9      	ldr	r1, [r7, #8]
 8000a8a:	6978      	ldr	r0, [r7, #20]
 8000a8c:	f7ff ff90 	bl	80009b0 <NVIC_EncodePriority>
 8000a90:	4602      	mov	r2, r0
 8000a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a96:	4611      	mov	r1, r2
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff ff5f 	bl	800095c <__NVIC_SetPriority>
}
 8000a9e:	bf00      	nop
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	b082      	sub	sp, #8
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	4603      	mov	r3, r0
 8000aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff ff35 	bl	8000924 <__NVIC_EnableIRQ>
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}

08000ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff ffa2 	bl	8000a14 <SysTick_Config>
 8000ad0:	4603      	mov	r3, r0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ada:	b480      	push	{r7}
 8000adc:	b085      	sub	sp, #20
 8000ade:	af00      	add	r7, sp, #0
 8000ae0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	2b02      	cmp	r3, #2
 8000af0:	d008      	beq.n	8000b04 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2204      	movs	r2, #4
 8000af6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2200      	movs	r2, #0
 8000afc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000b00:	2301      	movs	r3, #1
 8000b02:	e020      	b.n	8000b46 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f022 020e 	bic.w	r2, r2, #14
 8000b12:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	f022 0201 	bic.w	r2, r2, #1
 8000b22:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b2c:	2101      	movs	r1, #1
 8000b2e:	fa01 f202 	lsl.w	r2, r1, r2
 8000b32:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2201      	movs	r2, #1
 8000b38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3714      	adds	r7, #20
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr

08000b50 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	2b02      	cmp	r3, #2
 8000b66:	d005      	beq.n	8000b74 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2204      	movs	r2, #4
 8000b6c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	73fb      	strb	r3, [r7, #15]
 8000b72:	e051      	b.n	8000c18 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	f022 020e 	bic.w	r2, r2, #14
 8000b82:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f022 0201 	bic.w	r2, r2, #1
 8000b92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a22      	ldr	r2, [pc, #136]	; (8000c24 <HAL_DMA_Abort_IT+0xd4>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d029      	beq.n	8000bf2 <HAL_DMA_Abort_IT+0xa2>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a21      	ldr	r2, [pc, #132]	; (8000c28 <HAL_DMA_Abort_IT+0xd8>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d022      	beq.n	8000bee <HAL_DMA_Abort_IT+0x9e>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a1f      	ldr	r2, [pc, #124]	; (8000c2c <HAL_DMA_Abort_IT+0xdc>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d01a      	beq.n	8000be8 <HAL_DMA_Abort_IT+0x98>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a1e      	ldr	r2, [pc, #120]	; (8000c30 <HAL_DMA_Abort_IT+0xe0>)
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	d012      	beq.n	8000be2 <HAL_DMA_Abort_IT+0x92>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a1c      	ldr	r2, [pc, #112]	; (8000c34 <HAL_DMA_Abort_IT+0xe4>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d00a      	beq.n	8000bdc <HAL_DMA_Abort_IT+0x8c>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a1b      	ldr	r2, [pc, #108]	; (8000c38 <HAL_DMA_Abort_IT+0xe8>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d102      	bne.n	8000bd6 <HAL_DMA_Abort_IT+0x86>
 8000bd0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000bd4:	e00e      	b.n	8000bf4 <HAL_DMA_Abort_IT+0xa4>
 8000bd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000bda:	e00b      	b.n	8000bf4 <HAL_DMA_Abort_IT+0xa4>
 8000bdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000be0:	e008      	b.n	8000bf4 <HAL_DMA_Abort_IT+0xa4>
 8000be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be6:	e005      	b.n	8000bf4 <HAL_DMA_Abort_IT+0xa4>
 8000be8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bec:	e002      	b.n	8000bf4 <HAL_DMA_Abort_IT+0xa4>
 8000bee:	2310      	movs	r3, #16
 8000bf0:	e000      	b.n	8000bf4 <HAL_DMA_Abort_IT+0xa4>
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	4a11      	ldr	r2, [pc, #68]	; (8000c3c <HAL_DMA_Abort_IT+0xec>)
 8000bf6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d003      	beq.n	8000c18 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	4798      	blx	r3
    } 
  }
  return status;
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40020008 	.word	0x40020008
 8000c28:	4002001c 	.word	0x4002001c
 8000c2c:	40020030 	.word	0x40020030
 8000c30:	40020044 	.word	0x40020044
 8000c34:	40020058 	.word	0x40020058
 8000c38:	4002006c 	.word	0x4002006c
 8000c3c:	40020000 	.word	0x40020000

08000c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b08b      	sub	sp, #44	; 0x2c
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c52:	e148      	b.n	8000ee6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c54:	2201      	movs	r2, #1
 8000c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	69fa      	ldr	r2, [r7, #28]
 8000c64:	4013      	ands	r3, r2
 8000c66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	f040 8137 	bne.w	8000ee0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	4aa3      	ldr	r2, [pc, #652]	; (8000f04 <HAL_GPIO_Init+0x2c4>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d05e      	beq.n	8000d3a <HAL_GPIO_Init+0xfa>
 8000c7c:	4aa1      	ldr	r2, [pc, #644]	; (8000f04 <HAL_GPIO_Init+0x2c4>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d875      	bhi.n	8000d6e <HAL_GPIO_Init+0x12e>
 8000c82:	4aa1      	ldr	r2, [pc, #644]	; (8000f08 <HAL_GPIO_Init+0x2c8>)
 8000c84:	4293      	cmp	r3, r2
 8000c86:	d058      	beq.n	8000d3a <HAL_GPIO_Init+0xfa>
 8000c88:	4a9f      	ldr	r2, [pc, #636]	; (8000f08 <HAL_GPIO_Init+0x2c8>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d86f      	bhi.n	8000d6e <HAL_GPIO_Init+0x12e>
 8000c8e:	4a9f      	ldr	r2, [pc, #636]	; (8000f0c <HAL_GPIO_Init+0x2cc>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d052      	beq.n	8000d3a <HAL_GPIO_Init+0xfa>
 8000c94:	4a9d      	ldr	r2, [pc, #628]	; (8000f0c <HAL_GPIO_Init+0x2cc>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d869      	bhi.n	8000d6e <HAL_GPIO_Init+0x12e>
 8000c9a:	4a9d      	ldr	r2, [pc, #628]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d04c      	beq.n	8000d3a <HAL_GPIO_Init+0xfa>
 8000ca0:	4a9b      	ldr	r2, [pc, #620]	; (8000f10 <HAL_GPIO_Init+0x2d0>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d863      	bhi.n	8000d6e <HAL_GPIO_Init+0x12e>
 8000ca6:	4a9b      	ldr	r2, [pc, #620]	; (8000f14 <HAL_GPIO_Init+0x2d4>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d046      	beq.n	8000d3a <HAL_GPIO_Init+0xfa>
 8000cac:	4a99      	ldr	r2, [pc, #612]	; (8000f14 <HAL_GPIO_Init+0x2d4>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d85d      	bhi.n	8000d6e <HAL_GPIO_Init+0x12e>
 8000cb2:	2b12      	cmp	r3, #18
 8000cb4:	d82a      	bhi.n	8000d0c <HAL_GPIO_Init+0xcc>
 8000cb6:	2b12      	cmp	r3, #18
 8000cb8:	d859      	bhi.n	8000d6e <HAL_GPIO_Init+0x12e>
 8000cba:	a201      	add	r2, pc, #4	; (adr r2, 8000cc0 <HAL_GPIO_Init+0x80>)
 8000cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc0:	08000d3b 	.word	0x08000d3b
 8000cc4:	08000d15 	.word	0x08000d15
 8000cc8:	08000d27 	.word	0x08000d27
 8000ccc:	08000d69 	.word	0x08000d69
 8000cd0:	08000d6f 	.word	0x08000d6f
 8000cd4:	08000d6f 	.word	0x08000d6f
 8000cd8:	08000d6f 	.word	0x08000d6f
 8000cdc:	08000d6f 	.word	0x08000d6f
 8000ce0:	08000d6f 	.word	0x08000d6f
 8000ce4:	08000d6f 	.word	0x08000d6f
 8000ce8:	08000d6f 	.word	0x08000d6f
 8000cec:	08000d6f 	.word	0x08000d6f
 8000cf0:	08000d6f 	.word	0x08000d6f
 8000cf4:	08000d6f 	.word	0x08000d6f
 8000cf8:	08000d6f 	.word	0x08000d6f
 8000cfc:	08000d6f 	.word	0x08000d6f
 8000d00:	08000d6f 	.word	0x08000d6f
 8000d04:	08000d1d 	.word	0x08000d1d
 8000d08:	08000d31 	.word	0x08000d31
 8000d0c:	4a82      	ldr	r2, [pc, #520]	; (8000f18 <HAL_GPIO_Init+0x2d8>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d013      	beq.n	8000d3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d12:	e02c      	b.n	8000d6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	623b      	str	r3, [r7, #32]
          break;
 8000d1a:	e029      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	3304      	adds	r3, #4
 8000d22:	623b      	str	r3, [r7, #32]
          break;
 8000d24:	e024      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	3308      	adds	r3, #8
 8000d2c:	623b      	str	r3, [r7, #32]
          break;
 8000d2e:	e01f      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	330c      	adds	r3, #12
 8000d36:	623b      	str	r3, [r7, #32]
          break;
 8000d38:	e01a      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d102      	bne.n	8000d48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d42:	2304      	movs	r3, #4
 8000d44:	623b      	str	r3, [r7, #32]
          break;
 8000d46:	e013      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d105      	bne.n	8000d5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d50:	2308      	movs	r3, #8
 8000d52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	69fa      	ldr	r2, [r7, #28]
 8000d58:	611a      	str	r2, [r3, #16]
          break;
 8000d5a:	e009      	b.n	8000d70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d5c:	2308      	movs	r3, #8
 8000d5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	69fa      	ldr	r2, [r7, #28]
 8000d64:	615a      	str	r2, [r3, #20]
          break;
 8000d66:	e003      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	623b      	str	r3, [r7, #32]
          break;
 8000d6c:	e000      	b.n	8000d70 <HAL_GPIO_Init+0x130>
          break;
 8000d6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	2bff      	cmp	r3, #255	; 0xff
 8000d74:	d801      	bhi.n	8000d7a <HAL_GPIO_Init+0x13a>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	e001      	b.n	8000d7e <HAL_GPIO_Init+0x13e>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	2bff      	cmp	r3, #255	; 0xff
 8000d84:	d802      	bhi.n	8000d8c <HAL_GPIO_Init+0x14c>
 8000d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	e002      	b.n	8000d92 <HAL_GPIO_Init+0x152>
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8e:	3b08      	subs	r3, #8
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	210f      	movs	r1, #15
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000da0:	43db      	mvns	r3, r3
 8000da2:	401a      	ands	r2, r3
 8000da4:	6a39      	ldr	r1, [r7, #32]
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dac:	431a      	orrs	r2, r3
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f000 8090 	beq.w	8000ee0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000dc0:	4b56      	ldr	r3, [pc, #344]	; (8000f1c <HAL_GPIO_Init+0x2dc>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	4a55      	ldr	r2, [pc, #340]	; (8000f1c <HAL_GPIO_Init+0x2dc>)
 8000dc6:	f043 0301 	orr.w	r3, r3, #1
 8000dca:	6193      	str	r3, [r2, #24]
 8000dcc:	4b53      	ldr	r3, [pc, #332]	; (8000f1c <HAL_GPIO_Init+0x2dc>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f003 0301 	and.w	r3, r3, #1
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000dd8:	4a51      	ldr	r2, [pc, #324]	; (8000f20 <HAL_GPIO_Init+0x2e0>)
 8000dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ddc:	089b      	lsrs	r3, r3, #2
 8000dde:	3302      	adds	r3, #2
 8000de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de8:	f003 0303 	and.w	r3, r3, #3
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	220f      	movs	r2, #15
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	68fa      	ldr	r2, [r7, #12]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a49      	ldr	r2, [pc, #292]	; (8000f24 <HAL_GPIO_Init+0x2e4>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d00d      	beq.n	8000e20 <HAL_GPIO_Init+0x1e0>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a48      	ldr	r2, [pc, #288]	; (8000f28 <HAL_GPIO_Init+0x2e8>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d007      	beq.n	8000e1c <HAL_GPIO_Init+0x1dc>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a47      	ldr	r2, [pc, #284]	; (8000f2c <HAL_GPIO_Init+0x2ec>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d101      	bne.n	8000e18 <HAL_GPIO_Init+0x1d8>
 8000e14:	2302      	movs	r3, #2
 8000e16:	e004      	b.n	8000e22 <HAL_GPIO_Init+0x1e2>
 8000e18:	2303      	movs	r3, #3
 8000e1a:	e002      	b.n	8000e22 <HAL_GPIO_Init+0x1e2>
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	e000      	b.n	8000e22 <HAL_GPIO_Init+0x1e2>
 8000e20:	2300      	movs	r3, #0
 8000e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e24:	f002 0203 	and.w	r2, r2, #3
 8000e28:	0092      	lsls	r2, r2, #2
 8000e2a:	4093      	lsls	r3, r2
 8000e2c:	68fa      	ldr	r2, [r7, #12]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e32:	493b      	ldr	r1, [pc, #236]	; (8000f20 <HAL_GPIO_Init+0x2e0>)
 8000e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e36:	089b      	lsrs	r3, r3, #2
 8000e38:	3302      	adds	r3, #2
 8000e3a:	68fa      	ldr	r2, [r7, #12]
 8000e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d006      	beq.n	8000e5a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e4c:	4b38      	ldr	r3, [pc, #224]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	4937      	ldr	r1, [pc, #220]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	608b      	str	r3, [r1, #8]
 8000e58:	e006      	b.n	8000e68 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e5a:	4b35      	ldr	r3, [pc, #212]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000e5c:	689a      	ldr	r2, [r3, #8]
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	43db      	mvns	r3, r3
 8000e62:	4933      	ldr	r1, [pc, #204]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000e64:	4013      	ands	r3, r2
 8000e66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d006      	beq.n	8000e82 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e74:	4b2e      	ldr	r3, [pc, #184]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000e76:	68da      	ldr	r2, [r3, #12]
 8000e78:	492d      	ldr	r1, [pc, #180]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	60cb      	str	r3, [r1, #12]
 8000e80:	e006      	b.n	8000e90 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000e82:	4b2b      	ldr	r3, [pc, #172]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000e84:	68da      	ldr	r2, [r3, #12]
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	4929      	ldr	r1, [pc, #164]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d006      	beq.n	8000eaa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e9c:	4b24      	ldr	r3, [pc, #144]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000e9e:	685a      	ldr	r2, [r3, #4]
 8000ea0:	4923      	ldr	r1, [pc, #140]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	604b      	str	r3, [r1, #4]
 8000ea8:	e006      	b.n	8000eb8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000eaa:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000eac:	685a      	ldr	r2, [r3, #4]
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	491f      	ldr	r1, [pc, #124]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d006      	beq.n	8000ed2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ec4:	4b1a      	ldr	r3, [pc, #104]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4919      	ldr	r1, [pc, #100]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	600b      	str	r3, [r1, #0]
 8000ed0:	e006      	b.n	8000ee0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	4915      	ldr	r1, [pc, #84]	; (8000f30 <HAL_GPIO_Init+0x2f0>)
 8000edc:	4013      	ands	r3, r2
 8000ede:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eec:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f47f aeaf 	bne.w	8000c54 <HAL_GPIO_Init+0x14>
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	bf00      	nop
 8000efa:	372c      	adds	r7, #44	; 0x2c
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	10320000 	.word	0x10320000
 8000f08:	10310000 	.word	0x10310000
 8000f0c:	10220000 	.word	0x10220000
 8000f10:	10210000 	.word	0x10210000
 8000f14:	10120000 	.word	0x10120000
 8000f18:	10110000 	.word	0x10110000
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40010000 	.word	0x40010000
 8000f24:	40010800 	.word	0x40010800
 8000f28:	40010c00 	.word	0x40010c00
 8000f2c:	40011000 	.word	0x40011000
 8000f30:	40010400 	.word	0x40010400

08000f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	807b      	strh	r3, [r7, #2]
 8000f40:	4613      	mov	r3, r2
 8000f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f44:	787b      	ldrb	r3, [r7, #1]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f4a:	887a      	ldrh	r2, [r7, #2]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f50:	e003      	b.n	8000f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f52:	887b      	ldrh	r3, [r7, #2]
 8000f54:	041a      	lsls	r2, r3, #16
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	611a      	str	r2, [r3, #16]
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bc80      	pop	{r7}
 8000f62:	4770      	bx	lr

08000f64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e26c      	b.n	8001450 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	f000 8087 	beq.w	8001092 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f84:	4b92      	ldr	r3, [pc, #584]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 030c 	and.w	r3, r3, #12
 8000f8c:	2b04      	cmp	r3, #4
 8000f8e:	d00c      	beq.n	8000faa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f90:	4b8f      	ldr	r3, [pc, #572]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 030c 	and.w	r3, r3, #12
 8000f98:	2b08      	cmp	r3, #8
 8000f9a:	d112      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x5e>
 8000f9c:	4b8c      	ldr	r3, [pc, #560]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fa8:	d10b      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000faa:	4b89      	ldr	r3, [pc, #548]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d06c      	beq.n	8001090 <HAL_RCC_OscConfig+0x12c>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d168      	bne.n	8001090 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e246      	b.n	8001450 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fca:	d106      	bne.n	8000fda <HAL_RCC_OscConfig+0x76>
 8000fcc:	4b80      	ldr	r3, [pc, #512]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a7f      	ldr	r2, [pc, #508]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000fd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd6:	6013      	str	r3, [r2, #0]
 8000fd8:	e02e      	b.n	8001038 <HAL_RCC_OscConfig+0xd4>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d10c      	bne.n	8000ffc <HAL_RCC_OscConfig+0x98>
 8000fe2:	4b7b      	ldr	r3, [pc, #492]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a7a      	ldr	r2, [pc, #488]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000fe8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	4b78      	ldr	r3, [pc, #480]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a77      	ldr	r2, [pc, #476]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8000ff4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	e01d      	b.n	8001038 <HAL_RCC_OscConfig+0xd4>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001004:	d10c      	bne.n	8001020 <HAL_RCC_OscConfig+0xbc>
 8001006:	4b72      	ldr	r3, [pc, #456]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a71      	ldr	r2, [pc, #452]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 800100c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	4b6f      	ldr	r3, [pc, #444]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a6e      	ldr	r2, [pc, #440]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	e00b      	b.n	8001038 <HAL_RCC_OscConfig+0xd4>
 8001020:	4b6b      	ldr	r3, [pc, #428]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a6a      	ldr	r2, [pc, #424]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800102a:	6013      	str	r3, [r2, #0]
 800102c:	4b68      	ldr	r3, [pc, #416]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a67      	ldr	r2, [pc, #412]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001036:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d013      	beq.n	8001068 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001040:	f7ff fc34 	bl	80008ac <HAL_GetTick>
 8001044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001046:	e008      	b.n	800105a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001048:	f7ff fc30 	bl	80008ac <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b64      	cmp	r3, #100	; 0x64
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e1fa      	b.n	8001450 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800105a:	4b5d      	ldr	r3, [pc, #372]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0f0      	beq.n	8001048 <HAL_RCC_OscConfig+0xe4>
 8001066:	e014      	b.n	8001092 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001068:	f7ff fc20 	bl	80008ac <HAL_GetTick>
 800106c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800106e:	e008      	b.n	8001082 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001070:	f7ff fc1c 	bl	80008ac <HAL_GetTick>
 8001074:	4602      	mov	r2, r0
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	2b64      	cmp	r3, #100	; 0x64
 800107c:	d901      	bls.n	8001082 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800107e:	2303      	movs	r3, #3
 8001080:	e1e6      	b.n	8001450 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001082:	4b53      	ldr	r3, [pc, #332]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d1f0      	bne.n	8001070 <HAL_RCC_OscConfig+0x10c>
 800108e:	e000      	b.n	8001092 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d063      	beq.n	8001166 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800109e:	4b4c      	ldr	r3, [pc, #304]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 030c 	and.w	r3, r3, #12
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d00b      	beq.n	80010c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80010aa:	4b49      	ldr	r3, [pc, #292]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f003 030c 	and.w	r3, r3, #12
 80010b2:	2b08      	cmp	r3, #8
 80010b4:	d11c      	bne.n	80010f0 <HAL_RCC_OscConfig+0x18c>
 80010b6:	4b46      	ldr	r3, [pc, #280]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d116      	bne.n	80010f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010c2:	4b43      	ldr	r3, [pc, #268]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 0302 	and.w	r3, r3, #2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d005      	beq.n	80010da <HAL_RCC_OscConfig+0x176>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d001      	beq.n	80010da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e1ba      	b.n	8001450 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010da:	4b3d      	ldr	r3, [pc, #244]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	00db      	lsls	r3, r3, #3
 80010e8:	4939      	ldr	r1, [pc, #228]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 80010ea:	4313      	orrs	r3, r2
 80010ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ee:	e03a      	b.n	8001166 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	691b      	ldr	r3, [r3, #16]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d020      	beq.n	800113a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010f8:	4b36      	ldr	r3, [pc, #216]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fe:	f7ff fbd5 	bl	80008ac <HAL_GetTick>
 8001102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001104:	e008      	b.n	8001118 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001106:	f7ff fbd1 	bl	80008ac <HAL_GetTick>
 800110a:	4602      	mov	r2, r0
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	1ad3      	subs	r3, r2, r3
 8001110:	2b02      	cmp	r3, #2
 8001112:	d901      	bls.n	8001118 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001114:	2303      	movs	r3, #3
 8001116:	e19b      	b.n	8001450 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001118:	4b2d      	ldr	r3, [pc, #180]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d0f0      	beq.n	8001106 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001124:	4b2a      	ldr	r3, [pc, #168]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	4927      	ldr	r1, [pc, #156]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 8001134:	4313      	orrs	r3, r2
 8001136:	600b      	str	r3, [r1, #0]
 8001138:	e015      	b.n	8001166 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800113a:	4b26      	ldr	r3, [pc, #152]	; (80011d4 <HAL_RCC_OscConfig+0x270>)
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001140:	f7ff fbb4 	bl	80008ac <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001148:	f7ff fbb0 	bl	80008ac <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e17a      	b.n	8001450 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800115a:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1f0      	bne.n	8001148 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0308 	and.w	r3, r3, #8
 800116e:	2b00      	cmp	r3, #0
 8001170:	d03a      	beq.n	80011e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d019      	beq.n	80011ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800117a:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <HAL_RCC_OscConfig+0x274>)
 800117c:	2201      	movs	r2, #1
 800117e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001180:	f7ff fb94 	bl	80008ac <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001188:	f7ff fb90 	bl	80008ac <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e15a      	b.n	8001450 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HAL_RCC_OscConfig+0x26c>)
 800119c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d0f0      	beq.n	8001188 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80011a6:	2001      	movs	r0, #1
 80011a8:	f000 facc 	bl	8001744 <RCC_Delay>
 80011ac:	e01c      	b.n	80011e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011ae:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <HAL_RCC_OscConfig+0x274>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b4:	f7ff fb7a 	bl	80008ac <HAL_GetTick>
 80011b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ba:	e00f      	b.n	80011dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011bc:	f7ff fb76 	bl	80008ac <HAL_GetTick>
 80011c0:	4602      	mov	r2, r0
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d908      	bls.n	80011dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e140      	b.n	8001450 <HAL_RCC_OscConfig+0x4ec>
 80011ce:	bf00      	nop
 80011d0:	40021000 	.word	0x40021000
 80011d4:	42420000 	.word	0x42420000
 80011d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011dc:	4b9e      	ldr	r3, [pc, #632]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 80011de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e0:	f003 0302 	and.w	r3, r3, #2
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d1e9      	bne.n	80011bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f000 80a6 	beq.w	8001342 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011f6:	2300      	movs	r3, #0
 80011f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011fa:	4b97      	ldr	r3, [pc, #604]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d10d      	bne.n	8001222 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001206:	4b94      	ldr	r3, [pc, #592]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	4a93      	ldr	r2, [pc, #588]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 800120c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001210:	61d3      	str	r3, [r2, #28]
 8001212:	4b91      	ldr	r3, [pc, #580]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800121e:	2301      	movs	r3, #1
 8001220:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001222:	4b8e      	ldr	r3, [pc, #568]	; (800145c <HAL_RCC_OscConfig+0x4f8>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800122a:	2b00      	cmp	r3, #0
 800122c:	d118      	bne.n	8001260 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800122e:	4b8b      	ldr	r3, [pc, #556]	; (800145c <HAL_RCC_OscConfig+0x4f8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a8a      	ldr	r2, [pc, #552]	; (800145c <HAL_RCC_OscConfig+0x4f8>)
 8001234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800123a:	f7ff fb37 	bl	80008ac <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001240:	e008      	b.n	8001254 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001242:	f7ff fb33 	bl	80008ac <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b64      	cmp	r3, #100	; 0x64
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e0fd      	b.n	8001450 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001254:	4b81      	ldr	r3, [pc, #516]	; (800145c <HAL_RCC_OscConfig+0x4f8>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125c:	2b00      	cmp	r3, #0
 800125e:	d0f0      	beq.n	8001242 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d106      	bne.n	8001276 <HAL_RCC_OscConfig+0x312>
 8001268:	4b7b      	ldr	r3, [pc, #492]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	4a7a      	ldr	r2, [pc, #488]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	6213      	str	r3, [r2, #32]
 8001274:	e02d      	b.n	80012d2 <HAL_RCC_OscConfig+0x36e>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d10c      	bne.n	8001298 <HAL_RCC_OscConfig+0x334>
 800127e:	4b76      	ldr	r3, [pc, #472]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	4a75      	ldr	r2, [pc, #468]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 8001284:	f023 0301 	bic.w	r3, r3, #1
 8001288:	6213      	str	r3, [r2, #32]
 800128a:	4b73      	ldr	r3, [pc, #460]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 800128c:	6a1b      	ldr	r3, [r3, #32]
 800128e:	4a72      	ldr	r2, [pc, #456]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 8001290:	f023 0304 	bic.w	r3, r3, #4
 8001294:	6213      	str	r3, [r2, #32]
 8001296:	e01c      	b.n	80012d2 <HAL_RCC_OscConfig+0x36e>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	2b05      	cmp	r3, #5
 800129e:	d10c      	bne.n	80012ba <HAL_RCC_OscConfig+0x356>
 80012a0:	4b6d      	ldr	r3, [pc, #436]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 80012a2:	6a1b      	ldr	r3, [r3, #32]
 80012a4:	4a6c      	ldr	r2, [pc, #432]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 80012a6:	f043 0304 	orr.w	r3, r3, #4
 80012aa:	6213      	str	r3, [r2, #32]
 80012ac:	4b6a      	ldr	r3, [pc, #424]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	4a69      	ldr	r2, [pc, #420]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 80012b2:	f043 0301 	orr.w	r3, r3, #1
 80012b6:	6213      	str	r3, [r2, #32]
 80012b8:	e00b      	b.n	80012d2 <HAL_RCC_OscConfig+0x36e>
 80012ba:	4b67      	ldr	r3, [pc, #412]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 80012bc:	6a1b      	ldr	r3, [r3, #32]
 80012be:	4a66      	ldr	r2, [pc, #408]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 80012c0:	f023 0301 	bic.w	r3, r3, #1
 80012c4:	6213      	str	r3, [r2, #32]
 80012c6:	4b64      	ldr	r3, [pc, #400]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 80012c8:	6a1b      	ldr	r3, [r3, #32]
 80012ca:	4a63      	ldr	r2, [pc, #396]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 80012cc:	f023 0304 	bic.w	r3, r3, #4
 80012d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d015      	beq.n	8001306 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012da:	f7ff fae7 	bl	80008ac <HAL_GetTick>
 80012de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e0:	e00a      	b.n	80012f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012e2:	f7ff fae3 	bl	80008ac <HAL_GetTick>
 80012e6:	4602      	mov	r2, r0
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e0ab      	b.n	8001450 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012f8:	4b57      	ldr	r3, [pc, #348]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 80012fa:	6a1b      	ldr	r3, [r3, #32]
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0ee      	beq.n	80012e2 <HAL_RCC_OscConfig+0x37e>
 8001304:	e014      	b.n	8001330 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001306:	f7ff fad1 	bl	80008ac <HAL_GetTick>
 800130a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800130c:	e00a      	b.n	8001324 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800130e:	f7ff facd 	bl	80008ac <HAL_GetTick>
 8001312:	4602      	mov	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	f241 3288 	movw	r2, #5000	; 0x1388
 800131c:	4293      	cmp	r3, r2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e095      	b.n	8001450 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001324:	4b4c      	ldr	r3, [pc, #304]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d1ee      	bne.n	800130e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001330:	7dfb      	ldrb	r3, [r7, #23]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d105      	bne.n	8001342 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001336:	4b48      	ldr	r3, [pc, #288]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	4a47      	ldr	r2, [pc, #284]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 800133c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001340:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	2b00      	cmp	r3, #0
 8001348:	f000 8081 	beq.w	800144e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800134c:	4b42      	ldr	r3, [pc, #264]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f003 030c 	and.w	r3, r3, #12
 8001354:	2b08      	cmp	r3, #8
 8001356:	d061      	beq.n	800141c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	69db      	ldr	r3, [r3, #28]
 800135c:	2b02      	cmp	r3, #2
 800135e:	d146      	bne.n	80013ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001360:	4b3f      	ldr	r3, [pc, #252]	; (8001460 <HAL_RCC_OscConfig+0x4fc>)
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001366:	f7ff faa1 	bl	80008ac <HAL_GetTick>
 800136a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800136c:	e008      	b.n	8001380 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800136e:	f7ff fa9d 	bl	80008ac <HAL_GetTick>
 8001372:	4602      	mov	r2, r0
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	2b02      	cmp	r3, #2
 800137a:	d901      	bls.n	8001380 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800137c:	2303      	movs	r3, #3
 800137e:	e067      	b.n	8001450 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001380:	4b35      	ldr	r3, [pc, #212]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d1f0      	bne.n	800136e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a1b      	ldr	r3, [r3, #32]
 8001390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001394:	d108      	bne.n	80013a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001396:	4b30      	ldr	r3, [pc, #192]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	492d      	ldr	r1, [pc, #180]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 80013a4:	4313      	orrs	r3, r2
 80013a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013a8:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a19      	ldr	r1, [r3, #32]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b8:	430b      	orrs	r3, r1
 80013ba:	4927      	ldr	r1, [pc, #156]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 80013bc:	4313      	orrs	r3, r2
 80013be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013c0:	4b27      	ldr	r3, [pc, #156]	; (8001460 <HAL_RCC_OscConfig+0x4fc>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c6:	f7ff fa71 	bl	80008ac <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013ce:	f7ff fa6d 	bl	80008ac <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e037      	b.n	8001450 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013e0:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0f0      	beq.n	80013ce <HAL_RCC_OscConfig+0x46a>
 80013ec:	e02f      	b.n	800144e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013ee:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <HAL_RCC_OscConfig+0x4fc>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f4:	f7ff fa5a 	bl	80008ac <HAL_GetTick>
 80013f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013fa:	e008      	b.n	800140e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013fc:	f7ff fa56 	bl	80008ac <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	2b02      	cmp	r3, #2
 8001408:	d901      	bls.n	800140e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e020      	b.n	8001450 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800140e:	4b12      	ldr	r3, [pc, #72]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d1f0      	bne.n	80013fc <HAL_RCC_OscConfig+0x498>
 800141a:	e018      	b.n	800144e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	69db      	ldr	r3, [r3, #28]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d101      	bne.n	8001428 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e013      	b.n	8001450 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <HAL_RCC_OscConfig+0x4f4>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6a1b      	ldr	r3, [r3, #32]
 8001438:	429a      	cmp	r2, r3
 800143a:	d106      	bne.n	800144a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001446:	429a      	cmp	r2, r3
 8001448:	d001      	beq.n	800144e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e000      	b.n	8001450 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40021000 	.word	0x40021000
 800145c:	40007000 	.word	0x40007000
 8001460:	42420060 	.word	0x42420060

08001464 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e0d0      	b.n	800161a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001478:	4b6a      	ldr	r3, [pc, #424]	; (8001624 <HAL_RCC_ClockConfig+0x1c0>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0307 	and.w	r3, r3, #7
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	429a      	cmp	r2, r3
 8001484:	d910      	bls.n	80014a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001486:	4b67      	ldr	r3, [pc, #412]	; (8001624 <HAL_RCC_ClockConfig+0x1c0>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f023 0207 	bic.w	r2, r3, #7
 800148e:	4965      	ldr	r1, [pc, #404]	; (8001624 <HAL_RCC_ClockConfig+0x1c0>)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	4313      	orrs	r3, r2
 8001494:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001496:	4b63      	ldr	r3, [pc, #396]	; (8001624 <HAL_RCC_ClockConfig+0x1c0>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d001      	beq.n	80014a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e0b8      	b.n	800161a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d020      	beq.n	80014f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d005      	beq.n	80014cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014c0:	4b59      	ldr	r3, [pc, #356]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	4a58      	ldr	r2, [pc, #352]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 80014c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80014ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0308 	and.w	r3, r3, #8
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d005      	beq.n	80014e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014d8:	4b53      	ldr	r3, [pc, #332]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	4a52      	ldr	r2, [pc, #328]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 80014de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80014e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014e4:	4b50      	ldr	r3, [pc, #320]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	494d      	ldr	r1, [pc, #308]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d040      	beq.n	8001584 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d107      	bne.n	800151a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150a:	4b47      	ldr	r3, [pc, #284]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d115      	bne.n	8001542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e07f      	b.n	800161a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b02      	cmp	r3, #2
 8001520:	d107      	bne.n	8001532 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001522:	4b41      	ldr	r3, [pc, #260]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d109      	bne.n	8001542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e073      	b.n	800161a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001532:	4b3d      	ldr	r3, [pc, #244]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e06b      	b.n	800161a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001542:	4b39      	ldr	r3, [pc, #228]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f023 0203 	bic.w	r2, r3, #3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	4936      	ldr	r1, [pc, #216]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 8001550:	4313      	orrs	r3, r2
 8001552:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001554:	f7ff f9aa 	bl	80008ac <HAL_GetTick>
 8001558:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800155a:	e00a      	b.n	8001572 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800155c:	f7ff f9a6 	bl	80008ac <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	f241 3288 	movw	r2, #5000	; 0x1388
 800156a:	4293      	cmp	r3, r2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e053      	b.n	800161a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001572:	4b2d      	ldr	r3, [pc, #180]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f003 020c 	and.w	r2, r3, #12
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	429a      	cmp	r2, r3
 8001582:	d1eb      	bne.n	800155c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001584:	4b27      	ldr	r3, [pc, #156]	; (8001624 <HAL_RCC_ClockConfig+0x1c0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0307 	and.w	r3, r3, #7
 800158c:	683a      	ldr	r2, [r7, #0]
 800158e:	429a      	cmp	r2, r3
 8001590:	d210      	bcs.n	80015b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001592:	4b24      	ldr	r3, [pc, #144]	; (8001624 <HAL_RCC_ClockConfig+0x1c0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f023 0207 	bic.w	r2, r3, #7
 800159a:	4922      	ldr	r1, [pc, #136]	; (8001624 <HAL_RCC_ClockConfig+0x1c0>)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	4313      	orrs	r3, r2
 80015a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a2:	4b20      	ldr	r3, [pc, #128]	; (8001624 <HAL_RCC_ClockConfig+0x1c0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d001      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e032      	b.n	800161a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d008      	beq.n	80015d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015c0:	4b19      	ldr	r3, [pc, #100]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	4916      	ldr	r1, [pc, #88]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0308 	and.w	r3, r3, #8
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d009      	beq.n	80015f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80015de:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	490e      	ldr	r1, [pc, #56]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80015f2:	f000 f821 	bl	8001638 <HAL_RCC_GetSysClockFreq>
 80015f6:	4602      	mov	r2, r0
 80015f8:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <HAL_RCC_ClockConfig+0x1c4>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	091b      	lsrs	r3, r3, #4
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	490a      	ldr	r1, [pc, #40]	; (800162c <HAL_RCC_ClockConfig+0x1c8>)
 8001604:	5ccb      	ldrb	r3, [r1, r3]
 8001606:	fa22 f303 	lsr.w	r3, r2, r3
 800160a:	4a09      	ldr	r2, [pc, #36]	; (8001630 <HAL_RCC_ClockConfig+0x1cc>)
 800160c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <HAL_RCC_ClockConfig+0x1d0>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff f908 	bl	8000828 <HAL_InitTick>

  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40022000 	.word	0x40022000
 8001628:	40021000 	.word	0x40021000
 800162c:	0800365c 	.word	0x0800365c
 8001630:	20000014 	.word	0x20000014
 8001634:	20000018 	.word	0x20000018

08001638 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001638:	b480      	push	{r7}
 800163a:	b087      	sub	sp, #28
 800163c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	2300      	movs	r3, #0
 800164c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800164e:	2300      	movs	r3, #0
 8001650:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001652:	4b1e      	ldr	r3, [pc, #120]	; (80016cc <HAL_RCC_GetSysClockFreq+0x94>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 030c 	and.w	r3, r3, #12
 800165e:	2b04      	cmp	r3, #4
 8001660:	d002      	beq.n	8001668 <HAL_RCC_GetSysClockFreq+0x30>
 8001662:	2b08      	cmp	r3, #8
 8001664:	d003      	beq.n	800166e <HAL_RCC_GetSysClockFreq+0x36>
 8001666:	e027      	b.n	80016b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001668:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800166a:	613b      	str	r3, [r7, #16]
      break;
 800166c:	e027      	b.n	80016be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	0c9b      	lsrs	r3, r3, #18
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	4a17      	ldr	r2, [pc, #92]	; (80016d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001678:	5cd3      	ldrb	r3, [r2, r3]
 800167a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d010      	beq.n	80016a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001686:	4b11      	ldr	r3, [pc, #68]	; (80016cc <HAL_RCC_GetSysClockFreq+0x94>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	0c5b      	lsrs	r3, r3, #17
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	4a11      	ldr	r2, [pc, #68]	; (80016d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001692:	5cd3      	ldrb	r3, [r2, r3]
 8001694:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a0d      	ldr	r2, [pc, #52]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800169a:	fb02 f203 	mul.w	r2, r2, r3
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	e004      	b.n	80016b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4a0c      	ldr	r2, [pc, #48]	; (80016dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80016ac:	fb02 f303 	mul.w	r3, r2, r3
 80016b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	613b      	str	r3, [r7, #16]
      break;
 80016b6:	e002      	b.n	80016be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80016ba:	613b      	str	r3, [r7, #16]
      break;
 80016bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016be:	693b      	ldr	r3, [r7, #16]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	371c      	adds	r7, #28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bc80      	pop	{r7}
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	40021000 	.word	0x40021000
 80016d0:	007a1200 	.word	0x007a1200
 80016d4:	08003674 	.word	0x08003674
 80016d8:	08003684 	.word	0x08003684
 80016dc:	003d0900 	.word	0x003d0900

080016e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016e4:	4b02      	ldr	r3, [pc, #8]	; (80016f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80016e6:	681b      	ldr	r3, [r3, #0]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bc80      	pop	{r7}
 80016ee:	4770      	bx	lr
 80016f0:	20000014 	.word	0x20000014

080016f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80016f8:	f7ff fff2 	bl	80016e0 <HAL_RCC_GetHCLKFreq>
 80016fc:	4602      	mov	r2, r0
 80016fe:	4b05      	ldr	r3, [pc, #20]	; (8001714 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	0a1b      	lsrs	r3, r3, #8
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	4903      	ldr	r1, [pc, #12]	; (8001718 <HAL_RCC_GetPCLK1Freq+0x24>)
 800170a:	5ccb      	ldrb	r3, [r1, r3]
 800170c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001710:	4618      	mov	r0, r3
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40021000 	.word	0x40021000
 8001718:	0800366c 	.word	0x0800366c

0800171c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001720:	f7ff ffde 	bl	80016e0 <HAL_RCC_GetHCLKFreq>
 8001724:	4602      	mov	r2, r0
 8001726:	4b05      	ldr	r3, [pc, #20]	; (800173c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	0adb      	lsrs	r3, r3, #11
 800172c:	f003 0307 	and.w	r3, r3, #7
 8001730:	4903      	ldr	r1, [pc, #12]	; (8001740 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001732:	5ccb      	ldrb	r3, [r1, r3]
 8001734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001738:	4618      	mov	r0, r3
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40021000 	.word	0x40021000
 8001740:	0800366c 	.word	0x0800366c

08001744 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800174c:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <RCC_Delay+0x34>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a0a      	ldr	r2, [pc, #40]	; (800177c <RCC_Delay+0x38>)
 8001752:	fba2 2303 	umull	r2, r3, r2, r3
 8001756:	0a5b      	lsrs	r3, r3, #9
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	fb02 f303 	mul.w	r3, r2, r3
 800175e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001760:	bf00      	nop
  }
  while (Delay --);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	1e5a      	subs	r2, r3, #1
 8001766:	60fa      	str	r2, [r7, #12]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1f9      	bne.n	8001760 <RCC_Delay+0x1c>
}
 800176c:	bf00      	nop
 800176e:	bf00      	nop
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	20000014 	.word	0x20000014
 800177c:	10624dd3 	.word	0x10624dd3

08001780 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e041      	b.n	8001816 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d106      	bne.n	80017ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7fe fea8 	bl	80004fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2202      	movs	r2, #2
 80017b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3304      	adds	r3, #4
 80017bc:	4619      	mov	r1, r3
 80017be:	4610      	mov	r0, r2
 80017c0:	f000 fa6e 	bl	8001ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2201      	movs	r2, #1
 80017c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2201      	movs	r2, #1
 80017d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2201      	movs	r2, #1
 80017f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2201      	movs	r2, #1
 8001800:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001820:	b480      	push	{r7}
 8001822:	b085      	sub	sp, #20
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b01      	cmp	r3, #1
 8001832:	d001      	beq.n	8001838 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e035      	b.n	80018a4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2202      	movs	r2, #2
 800183c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f042 0201 	orr.w	r2, r2, #1
 800184e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a16      	ldr	r2, [pc, #88]	; (80018b0 <HAL_TIM_Base_Start_IT+0x90>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d009      	beq.n	800186e <HAL_TIM_Base_Start_IT+0x4e>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001862:	d004      	beq.n	800186e <HAL_TIM_Base_Start_IT+0x4e>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a12      	ldr	r2, [pc, #72]	; (80018b4 <HAL_TIM_Base_Start_IT+0x94>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d111      	bne.n	8001892 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 0307 	and.w	r3, r3, #7
 8001878:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2b06      	cmp	r3, #6
 800187e:	d010      	beq.n	80018a2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f042 0201 	orr.w	r2, r2, #1
 800188e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001890:	e007      	b.n	80018a2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f042 0201 	orr.w	r2, r2, #1
 80018a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40012c00 	.word	0x40012c00
 80018b4:	40000400 	.word	0x40000400

080018b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d122      	bne.n	8001914 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d11b      	bne.n	8001914 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f06f 0202 	mvn.w	r2, #2
 80018e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2201      	movs	r2, #1
 80018ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 f9b4 	bl	8001c68 <HAL_TIM_IC_CaptureCallback>
 8001900:	e005      	b.n	800190e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 f9a7 	bl	8001c56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 f9b6 	bl	8001c7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	2b04      	cmp	r3, #4
 8001920:	d122      	bne.n	8001968 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b04      	cmp	r3, #4
 800192e:	d11b      	bne.n	8001968 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f06f 0204 	mvn.w	r2, #4
 8001938:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2202      	movs	r2, #2
 800193e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 f98a 	bl	8001c68 <HAL_TIM_IC_CaptureCallback>
 8001954:	e005      	b.n	8001962 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f000 f97d 	bl	8001c56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 f98c 	bl	8001c7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	f003 0308 	and.w	r3, r3, #8
 8001972:	2b08      	cmp	r3, #8
 8001974:	d122      	bne.n	80019bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b08      	cmp	r3, #8
 8001982:	d11b      	bne.n	80019bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f06f 0208 	mvn.w	r2, #8
 800198c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2204      	movs	r2, #4
 8001992:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	f003 0303 	and.w	r3, r3, #3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f960 	bl	8001c68 <HAL_TIM_IC_CaptureCallback>
 80019a8:	e005      	b.n	80019b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f000 f953 	bl	8001c56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 f962 	bl	8001c7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	f003 0310 	and.w	r3, r3, #16
 80019c6:	2b10      	cmp	r3, #16
 80019c8:	d122      	bne.n	8001a10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	f003 0310 	and.w	r3, r3, #16
 80019d4:	2b10      	cmp	r3, #16
 80019d6:	d11b      	bne.n	8001a10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f06f 0210 	mvn.w	r2, #16
 80019e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2208      	movs	r2, #8
 80019e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f000 f936 	bl	8001c68 <HAL_TIM_IC_CaptureCallback>
 80019fc:	e005      	b.n	8001a0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 f929 	bl	8001c56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f000 f938 	bl	8001c7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	f003 0301 	and.w	r3, r3, #1
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d10e      	bne.n	8001a3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d107      	bne.n	8001a3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f06f 0201 	mvn.w	r2, #1
 8001a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7fe fcbe 	bl	80003b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a46:	2b80      	cmp	r3, #128	; 0x80
 8001a48:	d10e      	bne.n	8001a68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a54:	2b80      	cmp	r3, #128	; 0x80
 8001a56:	d107      	bne.n	8001a68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 fa6b 	bl	8001f3e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a72:	2b40      	cmp	r3, #64	; 0x40
 8001a74:	d10e      	bne.n	8001a94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a80:	2b40      	cmp	r3, #64	; 0x40
 8001a82:	d107      	bne.n	8001a94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001a8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f000 f8fc 	bl	8001c8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	f003 0320 	and.w	r3, r3, #32
 8001a9e:	2b20      	cmp	r3, #32
 8001aa0:	d10e      	bne.n	8001ac0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	f003 0320 	and.w	r3, r3, #32
 8001aac:	2b20      	cmp	r3, #32
 8001aae:	d107      	bne.n	8001ac0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f06f 0220 	mvn.w	r2, #32
 8001ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 fa36 	bl	8001f2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d101      	bne.n	8001ae4 <HAL_TIM_ConfigClockSource+0x1c>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	e0b4      	b.n	8001c4e <HAL_TIM_ConfigClockSource+0x186>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2202      	movs	r2, #2
 8001af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001b02:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b0a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68ba      	ldr	r2, [r7, #8]
 8001b12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b1c:	d03e      	beq.n	8001b9c <HAL_TIM_ConfigClockSource+0xd4>
 8001b1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b22:	f200 8087 	bhi.w	8001c34 <HAL_TIM_ConfigClockSource+0x16c>
 8001b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b2a:	f000 8086 	beq.w	8001c3a <HAL_TIM_ConfigClockSource+0x172>
 8001b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b32:	d87f      	bhi.n	8001c34 <HAL_TIM_ConfigClockSource+0x16c>
 8001b34:	2b70      	cmp	r3, #112	; 0x70
 8001b36:	d01a      	beq.n	8001b6e <HAL_TIM_ConfigClockSource+0xa6>
 8001b38:	2b70      	cmp	r3, #112	; 0x70
 8001b3a:	d87b      	bhi.n	8001c34 <HAL_TIM_ConfigClockSource+0x16c>
 8001b3c:	2b60      	cmp	r3, #96	; 0x60
 8001b3e:	d050      	beq.n	8001be2 <HAL_TIM_ConfigClockSource+0x11a>
 8001b40:	2b60      	cmp	r3, #96	; 0x60
 8001b42:	d877      	bhi.n	8001c34 <HAL_TIM_ConfigClockSource+0x16c>
 8001b44:	2b50      	cmp	r3, #80	; 0x50
 8001b46:	d03c      	beq.n	8001bc2 <HAL_TIM_ConfigClockSource+0xfa>
 8001b48:	2b50      	cmp	r3, #80	; 0x50
 8001b4a:	d873      	bhi.n	8001c34 <HAL_TIM_ConfigClockSource+0x16c>
 8001b4c:	2b40      	cmp	r3, #64	; 0x40
 8001b4e:	d058      	beq.n	8001c02 <HAL_TIM_ConfigClockSource+0x13a>
 8001b50:	2b40      	cmp	r3, #64	; 0x40
 8001b52:	d86f      	bhi.n	8001c34 <HAL_TIM_ConfigClockSource+0x16c>
 8001b54:	2b30      	cmp	r3, #48	; 0x30
 8001b56:	d064      	beq.n	8001c22 <HAL_TIM_ConfigClockSource+0x15a>
 8001b58:	2b30      	cmp	r3, #48	; 0x30
 8001b5a:	d86b      	bhi.n	8001c34 <HAL_TIM_ConfigClockSource+0x16c>
 8001b5c:	2b20      	cmp	r3, #32
 8001b5e:	d060      	beq.n	8001c22 <HAL_TIM_ConfigClockSource+0x15a>
 8001b60:	2b20      	cmp	r3, #32
 8001b62:	d867      	bhi.n	8001c34 <HAL_TIM_ConfigClockSource+0x16c>
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d05c      	beq.n	8001c22 <HAL_TIM_ConfigClockSource+0x15a>
 8001b68:	2b10      	cmp	r3, #16
 8001b6a:	d05a      	beq.n	8001c22 <HAL_TIM_ConfigClockSource+0x15a>
 8001b6c:	e062      	b.n	8001c34 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6818      	ldr	r0, [r3, #0]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	6899      	ldr	r1, [r3, #8]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685a      	ldr	r2, [r3, #4]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	f000 f95e 	bl	8001e3e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001b90:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	609a      	str	r2, [r3, #8]
      break;
 8001b9a:	e04f      	b.n	8001c3c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6818      	ldr	r0, [r3, #0]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	6899      	ldr	r1, [r3, #8]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	f000 f947 	bl	8001e3e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bbe:	609a      	str	r2, [r3, #8]
      break;
 8001bc0:	e03c      	b.n	8001c3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6818      	ldr	r0, [r3, #0]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	6859      	ldr	r1, [r3, #4]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	f000 f8be 	bl	8001d50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2150      	movs	r1, #80	; 0x50
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f000 f915 	bl	8001e0a <TIM_ITRx_SetConfig>
      break;
 8001be0:	e02c      	b.n	8001c3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6818      	ldr	r0, [r3, #0]
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	6859      	ldr	r1, [r3, #4]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	f000 f8dc 	bl	8001dac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2160      	movs	r1, #96	; 0x60
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 f905 	bl	8001e0a <TIM_ITRx_SetConfig>
      break;
 8001c00:	e01c      	b.n	8001c3c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6818      	ldr	r0, [r3, #0]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	6859      	ldr	r1, [r3, #4]
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	f000 f89e 	bl	8001d50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2140      	movs	r1, #64	; 0x40
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f000 f8f5 	bl	8001e0a <TIM_ITRx_SetConfig>
      break;
 8001c20:	e00c      	b.n	8001c3c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4610      	mov	r0, r2
 8001c2e:	f000 f8ec 	bl	8001e0a <TIM_ITRx_SetConfig>
      break;
 8001c32:	e003      	b.n	8001c3c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	73fb      	strb	r3, [r7, #15]
      break;
 8001c38:	e000      	b.n	8001c3c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001c3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c56:	b480      	push	{r7}
 8001c58:	b083      	sub	sp, #12
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr

08001c68 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c70:	bf00      	nop
 8001c72:	370c      	adds	r7, #12
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr

08001c7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr
	...

08001ca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a25      	ldr	r2, [pc, #148]	; (8001d48 <TIM_Base_SetConfig+0xa8>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d007      	beq.n	8001cc8 <TIM_Base_SetConfig+0x28>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cbe:	d003      	beq.n	8001cc8 <TIM_Base_SetConfig+0x28>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a22      	ldr	r2, [pc, #136]	; (8001d4c <TIM_Base_SetConfig+0xac>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d108      	bne.n	8001cda <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a1a      	ldr	r2, [pc, #104]	; (8001d48 <TIM_Base_SetConfig+0xa8>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d007      	beq.n	8001cf2 <TIM_Base_SetConfig+0x52>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce8:	d003      	beq.n	8001cf2 <TIM_Base_SetConfig+0x52>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a17      	ldr	r2, [pc, #92]	; (8001d4c <TIM_Base_SetConfig+0xac>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d108      	bne.n	8001d04 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a07      	ldr	r2, [pc, #28]	; (8001d48 <TIM_Base_SetConfig+0xa8>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d103      	bne.n	8001d38 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	691a      	ldr	r2, [r3, #16]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	615a      	str	r2, [r3, #20]
}
 8001d3e:	bf00      	nop
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr
 8001d48:	40012c00 	.word	0x40012c00
 8001d4c:	40000400 	.word	0x40000400

08001d50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b087      	sub	sp, #28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a1b      	ldr	r3, [r3, #32]
 8001d60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
 8001d66:	f023 0201 	bic.w	r2, r3, #1
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	011b      	lsls	r3, r3, #4
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f023 030a 	bic.w	r3, r3, #10
 8001d8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	621a      	str	r2, [r3, #32]
}
 8001da2:	bf00      	nop
 8001da4:	371c      	adds	r7, #28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr

08001dac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b087      	sub	sp, #28
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6a1b      	ldr	r3, [r3, #32]
 8001dbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	f023 0210 	bic.w	r2, r3, #16
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001dd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	031b      	lsls	r3, r3, #12
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001de8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	011b      	lsls	r3, r3, #4
 8001dee:	697a      	ldr	r2, [r7, #20]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	621a      	str	r2, [r3, #32]
}
 8001e00:	bf00      	nop
 8001e02:	371c      	adds	r7, #28
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr

08001e0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b085      	sub	sp, #20
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	f043 0307 	orr.w	r3, r3, #7
 8001e2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	609a      	str	r2, [r3, #8]
}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr

08001e3e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b087      	sub	sp, #28
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	60f8      	str	r0, [r7, #12]
 8001e46:	60b9      	str	r1, [r7, #8]
 8001e48:	607a      	str	r2, [r7, #4]
 8001e4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e58:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	021a      	lsls	r2, r3, #8
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	431a      	orrs	r2, r3
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	697a      	ldr	r2, [r7, #20]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	609a      	str	r2, [r3, #8]
}
 8001e72:	bf00      	nop
 8001e74:	371c      	adds	r7, #28
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr

08001e7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b085      	sub	sp, #20
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d101      	bne.n	8001e94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001e90:	2302      	movs	r3, #2
 8001e92:	e041      	b.n	8001f18 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a14      	ldr	r2, [pc, #80]	; (8001f24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d009      	beq.n	8001eec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ee0:	d004      	beq.n	8001eec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a10      	ldr	r2, [pc, #64]	; (8001f28 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d10c      	bne.n	8001f06 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ef2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	68ba      	ldr	r2, [r7, #8]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3714      	adds	r7, #20
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bc80      	pop	{r7}
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40012c00 	.word	0x40012c00
 8001f28:	40000400 	.word	0x40000400

08001f2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bc80      	pop	{r7}
 8001f3c:	4770      	bx	lr

08001f3e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr

08001f50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e042      	b.n	8001fe8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d106      	bne.n	8001f7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7fe fae4 	bl	8000544 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2224      	movs	r2, #36	; 0x24
 8001f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 fdc5 	bl	8002b24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	691a      	ldr	r2, [r3, #16]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	695a      	ldr	r2, [r3, #20]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68da      	ldr	r2, [r3, #12]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2220      	movs	r2, #32
 8001fd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2220      	movs	r2, #32
 8001fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08a      	sub	sp, #40	; 0x28
 8001ff4:	af02      	add	r7, sp, #8
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b20      	cmp	r3, #32
 800200e:	d16d      	bne.n	80020ec <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d002      	beq.n	800201c <HAL_UART_Transmit+0x2c>
 8002016:	88fb      	ldrh	r3, [r7, #6]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e066      	b.n	80020ee <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2221      	movs	r2, #33	; 0x21
 800202a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800202e:	f7fe fc3d 	bl	80008ac <HAL_GetTick>
 8002032:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	88fa      	ldrh	r2, [r7, #6]
 8002038:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	88fa      	ldrh	r2, [r7, #6]
 800203e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002048:	d108      	bne.n	800205c <HAL_UART_Transmit+0x6c>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d104      	bne.n	800205c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	61bb      	str	r3, [r7, #24]
 800205a:	e003      	b.n	8002064 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002060:	2300      	movs	r3, #0
 8002062:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002064:	e02a      	b.n	80020bc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	2200      	movs	r2, #0
 800206e:	2180      	movs	r1, #128	; 0x80
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f000 fb14 	bl	800269e <UART_WaitOnFlagUntilTimeout>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e036      	b.n	80020ee <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10b      	bne.n	800209e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	461a      	mov	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002094:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	3302      	adds	r3, #2
 800209a:	61bb      	str	r3, [r7, #24]
 800209c:	e007      	b.n	80020ae <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	781a      	ldrb	r2, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	3301      	adds	r3, #1
 80020ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	3b01      	subs	r3, #1
 80020b6:	b29a      	uxth	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1cf      	bne.n	8002066 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2200      	movs	r2, #0
 80020ce:	2140      	movs	r1, #64	; 0x40
 80020d0:	68f8      	ldr	r0, [r7, #12]
 80020d2:	f000 fae4 	bl	800269e <UART_WaitOnFlagUntilTimeout>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e006      	b.n	80020ee <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2220      	movs	r2, #32
 80020e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80020e8:	2300      	movs	r3, #0
 80020ea:	e000      	b.n	80020ee <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80020ec:	2302      	movs	r3, #2
  }
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3720      	adds	r7, #32
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b084      	sub	sp, #16
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	60f8      	str	r0, [r7, #12]
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	4613      	mov	r3, r2
 8002102:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b20      	cmp	r3, #32
 800210e:	d112      	bne.n	8002136 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d002      	beq.n	800211c <HAL_UART_Receive_IT+0x26>
 8002116:	88fb      	ldrh	r3, [r7, #6]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e00b      	b.n	8002138 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2200      	movs	r2, #0
 8002124:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002126:	88fb      	ldrh	r3, [r7, #6]
 8002128:	461a      	mov	r2, r3
 800212a:	68b9      	ldr	r1, [r7, #8]
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f000 fb24 	bl	800277a <UART_Start_Receive_IT>
 8002132:	4603      	mov	r3, r0
 8002134:	e000      	b.n	8002138 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002136:	2302      	movs	r3, #2
  }
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b0ba      	sub	sp, #232	; 0xe8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002166:	2300      	movs	r3, #0
 8002168:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800216c:	2300      	movs	r3, #0
 800216e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800217e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10f      	bne.n	80021a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800218a:	f003 0320 	and.w	r3, r3, #32
 800218e:	2b00      	cmp	r3, #0
 8002190:	d009      	beq.n	80021a6 <HAL_UART_IRQHandler+0x66>
 8002192:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002196:	f003 0320 	and.w	r3, r3, #32
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 fc01 	bl	80029a6 <UART_Receive_IT>
      return;
 80021a4:	e25b      	b.n	800265e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80021a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 80de 	beq.w	800236c <HAL_UART_IRQHandler+0x22c>
 80021b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d106      	bne.n	80021ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80021bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 80d1 	beq.w	800236c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80021ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d00b      	beq.n	80021ee <HAL_UART_IRQHandler+0xae>
 80021d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d005      	beq.n	80021ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	f043 0201 	orr.w	r2, r3, #1
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80021ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021f2:	f003 0304 	and.w	r3, r3, #4
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00b      	beq.n	8002212 <HAL_UART_IRQHandler+0xd2>
 80021fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	2b00      	cmp	r3, #0
 8002204:	d005      	beq.n	8002212 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	f043 0202 	orr.w	r2, r3, #2
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00b      	beq.n	8002236 <HAL_UART_IRQHandler+0xf6>
 800221e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d005      	beq.n	8002236 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222e:	f043 0204 	orr.w	r2, r3, #4
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800223a:	f003 0308 	and.w	r3, r3, #8
 800223e:	2b00      	cmp	r3, #0
 8002240:	d011      	beq.n	8002266 <HAL_UART_IRQHandler+0x126>
 8002242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002246:	f003 0320 	and.w	r3, r3, #32
 800224a:	2b00      	cmp	r3, #0
 800224c:	d105      	bne.n	800225a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800224e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d005      	beq.n	8002266 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225e:	f043 0208 	orr.w	r2, r3, #8
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 81f2 	beq.w	8002654 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002274:	f003 0320 	and.w	r3, r3, #32
 8002278:	2b00      	cmp	r3, #0
 800227a:	d008      	beq.n	800228e <HAL_UART_IRQHandler+0x14e>
 800227c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002280:	f003 0320 	and.w	r3, r3, #32
 8002284:	2b00      	cmp	r3, #0
 8002286:	d002      	beq.n	800228e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 fb8c 	bl	80029a6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002298:	2b00      	cmp	r3, #0
 800229a:	bf14      	ite	ne
 800229c:	2301      	movne	r3, #1
 800229e:	2300      	moveq	r3, #0
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022aa:	f003 0308 	and.w	r3, r3, #8
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d103      	bne.n	80022ba <HAL_UART_IRQHandler+0x17a>
 80022b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d04f      	beq.n	800235a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 fa96 	bl	80027ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d041      	beq.n	8002352 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	3314      	adds	r3, #20
 80022d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022dc:	e853 3f00 	ldrex	r3, [r3]
 80022e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80022e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	3314      	adds	r3, #20
 80022f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80022fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80022fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002302:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002306:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800230a:	e841 2300 	strex	r3, r2, [r1]
 800230e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002312:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1d9      	bne.n	80022ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231e:	2b00      	cmp	r3, #0
 8002320:	d013      	beq.n	800234a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002326:	4a7e      	ldr	r2, [pc, #504]	; (8002520 <HAL_UART_IRQHandler+0x3e0>)
 8002328:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe fc0e 	bl	8000b50 <HAL_DMA_Abort_IT>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d016      	beq.n	8002368 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800233e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002344:	4610      	mov	r0, r2
 8002346:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002348:	e00e      	b.n	8002368 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f993 	bl	8002676 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002350:	e00a      	b.n	8002368 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f000 f98f 	bl	8002676 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002358:	e006      	b.n	8002368 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f98b 	bl	8002676 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002366:	e175      	b.n	8002654 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002368:	bf00      	nop
    return;
 800236a:	e173      	b.n	8002654 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002370:	2b01      	cmp	r3, #1
 8002372:	f040 814f 	bne.w	8002614 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800237a:	f003 0310 	and.w	r3, r3, #16
 800237e:	2b00      	cmp	r3, #0
 8002380:	f000 8148 	beq.w	8002614 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002388:	f003 0310 	and.w	r3, r3, #16
 800238c:	2b00      	cmp	r3, #0
 800238e:	f000 8141 	beq.w	8002614 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002392:	2300      	movs	r3, #0
 8002394:	60bb      	str	r3, [r7, #8]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	60bb      	str	r3, [r7, #8]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	f000 80b6 	beq.w	8002524 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80023c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 8145 	beq.w	8002658 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80023d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80023d6:	429a      	cmp	r2, r3
 80023d8:	f080 813e 	bcs.w	8002658 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80023e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	2b20      	cmp	r3, #32
 80023ec:	f000 8088 	beq.w	8002500 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	330c      	adds	r3, #12
 80023f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023fe:	e853 3f00 	ldrex	r3, [r3]
 8002402:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002406:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800240a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800240e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	330c      	adds	r3, #12
 8002418:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800241c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002420:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002424:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002428:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800242c:	e841 2300 	strex	r3, r2, [r1]
 8002430:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002434:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1d9      	bne.n	80023f0 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	3314      	adds	r3, #20
 8002442:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002444:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002446:	e853 3f00 	ldrex	r3, [r3]
 800244a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800244c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800244e:	f023 0301 	bic.w	r3, r3, #1
 8002452:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	3314      	adds	r3, #20
 800245c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002460:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002464:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002466:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002468:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800246c:	e841 2300 	strex	r3, r2, [r1]
 8002470:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002472:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1e1      	bne.n	800243c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	3314      	adds	r3, #20
 800247e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002480:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002482:	e853 3f00 	ldrex	r3, [r3]
 8002486:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002488:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800248a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800248e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	3314      	adds	r3, #20
 8002498:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800249c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800249e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024a0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80024a2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80024a4:	e841 2300 	strex	r3, r2, [r1]
 80024a8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80024aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1e3      	bne.n	8002478 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2220      	movs	r2, #32
 80024b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	330c      	adds	r3, #12
 80024c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024c8:	e853 3f00 	ldrex	r3, [r3]
 80024cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80024ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024d0:	f023 0310 	bic.w	r3, r3, #16
 80024d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	330c      	adds	r3, #12
 80024de:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80024e2:	65ba      	str	r2, [r7, #88]	; 0x58
 80024e4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80024e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80024ea:	e841 2300 	strex	r3, r2, [r1]
 80024ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80024f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1e3      	bne.n	80024be <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fe faed 	bl	8000ada <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2202      	movs	r2, #2
 8002504:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800250e:	b29b      	uxth	r3, r3
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	b29b      	uxth	r3, r3
 8002514:	4619      	mov	r1, r3
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 f8b6 	bl	8002688 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800251c:	e09c      	b.n	8002658 <HAL_UART_IRQHandler+0x518>
 800251e:	bf00      	nop
 8002520:	080028b1 	.word	0x080028b1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800252c:	b29b      	uxth	r3, r3
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002538:	b29b      	uxth	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 808e 	beq.w	800265c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002540:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 8089 	beq.w	800265c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	330c      	adds	r3, #12
 8002550:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002554:	e853 3f00 	ldrex	r3, [r3]
 8002558:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800255a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800255c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002560:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	330c      	adds	r3, #12
 800256a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800256e:	647a      	str	r2, [r7, #68]	; 0x44
 8002570:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002572:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002574:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002576:	e841 2300 	strex	r3, r2, [r1]
 800257a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800257c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1e3      	bne.n	800254a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	3314      	adds	r3, #20
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	e853 3f00 	ldrex	r3, [r3]
 8002590:	623b      	str	r3, [r7, #32]
   return(result);
 8002592:	6a3b      	ldr	r3, [r7, #32]
 8002594:	f023 0301 	bic.w	r3, r3, #1
 8002598:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	3314      	adds	r3, #20
 80025a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80025a6:	633a      	str	r2, [r7, #48]	; 0x30
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80025ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025ae:	e841 2300 	strex	r3, r2, [r1]
 80025b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80025b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1e3      	bne.n	8002582 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2220      	movs	r2, #32
 80025be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	330c      	adds	r3, #12
 80025ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	e853 3f00 	ldrex	r3, [r3]
 80025d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f023 0310 	bic.w	r3, r3, #16
 80025de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	330c      	adds	r3, #12
 80025e8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80025ec:	61fa      	str	r2, [r7, #28]
 80025ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f0:	69b9      	ldr	r1, [r7, #24]
 80025f2:	69fa      	ldr	r2, [r7, #28]
 80025f4:	e841 2300 	strex	r3, r2, [r1]
 80025f8:	617b      	str	r3, [r7, #20]
   return(result);
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1e3      	bne.n	80025c8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2202      	movs	r2, #2
 8002604:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002606:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800260a:	4619      	mov	r1, r3
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 f83b 	bl	8002688 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002612:	e023      	b.n	800265c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261c:	2b00      	cmp	r3, #0
 800261e:	d009      	beq.n	8002634 <HAL_UART_IRQHandler+0x4f4>
 8002620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f953 	bl	80028d8 <UART_Transmit_IT>
    return;
 8002632:	e014      	b.n	800265e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00e      	beq.n	800265e <HAL_UART_IRQHandler+0x51e>
 8002640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002648:	2b00      	cmp	r3, #0
 800264a:	d008      	beq.n	800265e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f992 	bl	8002976 <UART_EndTransmit_IT>
    return;
 8002652:	e004      	b.n	800265e <HAL_UART_IRQHandler+0x51e>
    return;
 8002654:	bf00      	nop
 8002656:	e002      	b.n	800265e <HAL_UART_IRQHandler+0x51e>
      return;
 8002658:	bf00      	nop
 800265a:	e000      	b.n	800265e <HAL_UART_IRQHandler+0x51e>
      return;
 800265c:	bf00      	nop
  }
}
 800265e:	37e8      	adds	r7, #232	; 0xe8
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr

08002676 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002676:	b480      	push	{r7}
 8002678:	b083      	sub	sp, #12
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr

08002688 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	bc80      	pop	{r7}
 800269c:	4770      	bx	lr

0800269e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b090      	sub	sp, #64	; 0x40
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	60f8      	str	r0, [r7, #12]
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	603b      	str	r3, [r7, #0]
 80026aa:	4613      	mov	r3, r2
 80026ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026ae:	e050      	b.n	8002752 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b6:	d04c      	beq.n	8002752 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80026b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d007      	beq.n	80026ce <UART_WaitOnFlagUntilTimeout+0x30>
 80026be:	f7fe f8f5 	bl	80008ac <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d241      	bcs.n	8002752 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	330c      	adds	r3, #12
 80026d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d8:	e853 3f00 	ldrex	r3, [r3]
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80026de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80026e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	330c      	adds	r3, #12
 80026ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026ee:	637a      	str	r2, [r7, #52]	; 0x34
 80026f0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80026f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80026f6:	e841 2300 	strex	r3, r2, [r1]
 80026fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80026fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1e5      	bne.n	80026ce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	3314      	adds	r3, #20
 8002708:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	e853 3f00 	ldrex	r3, [r3]
 8002710:	613b      	str	r3, [r7, #16]
   return(result);
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	f023 0301 	bic.w	r3, r3, #1
 8002718:	63bb      	str	r3, [r7, #56]	; 0x38
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	3314      	adds	r3, #20
 8002720:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002722:	623a      	str	r2, [r7, #32]
 8002724:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002726:	69f9      	ldr	r1, [r7, #28]
 8002728:	6a3a      	ldr	r2, [r7, #32]
 800272a:	e841 2300 	strex	r3, r2, [r1]
 800272e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1e5      	bne.n	8002702 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2220      	movs	r2, #32
 800273a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2220      	movs	r2, #32
 8002742:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e00f      	b.n	8002772 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	4013      	ands	r3, r2
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	429a      	cmp	r2, r3
 8002760:	bf0c      	ite	eq
 8002762:	2301      	moveq	r3, #1
 8002764:	2300      	movne	r3, #0
 8002766:	b2db      	uxtb	r3, r3
 8002768:	461a      	mov	r2, r3
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	429a      	cmp	r2, r3
 800276e:	d09f      	beq.n	80026b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3740      	adds	r7, #64	; 0x40
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800277a:	b480      	push	{r7}
 800277c:	b085      	sub	sp, #20
 800277e:	af00      	add	r7, sp, #0
 8002780:	60f8      	str	r0, [r7, #12]
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	4613      	mov	r3, r2
 8002786:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	88fa      	ldrh	r2, [r7, #6]
 8002792:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	88fa      	ldrh	r2, [r7, #6]
 8002798:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2222      	movs	r2, #34	; 0x22
 80027a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d007      	beq.n	80027c0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68da      	ldr	r2, [r3, #12]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027be:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	695a      	ldr	r2, [r3, #20]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 0201 	orr.w	r2, r2, #1
 80027ce:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0220 	orr.w	r2, r2, #32
 80027de:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bc80      	pop	{r7}
 80027ea:	4770      	bx	lr

080027ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b095      	sub	sp, #84	; 0x54
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	330c      	adds	r3, #12
 80027fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027fe:	e853 3f00 	ldrex	r3, [r3]
 8002802:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002806:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800280a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	330c      	adds	r3, #12
 8002812:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002814:	643a      	str	r2, [r7, #64]	; 0x40
 8002816:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002818:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800281a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800281c:	e841 2300 	strex	r3, r2, [r1]
 8002820:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1e5      	bne.n	80027f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	3314      	adds	r3, #20
 800282e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	e853 3f00 	ldrex	r3, [r3]
 8002836:	61fb      	str	r3, [r7, #28]
   return(result);
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f023 0301 	bic.w	r3, r3, #1
 800283e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	3314      	adds	r3, #20
 8002846:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002848:	62fa      	str	r2, [r7, #44]	; 0x2c
 800284a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800284c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800284e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002850:	e841 2300 	strex	r3, r2, [r1]
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002858:	2b00      	cmp	r3, #0
 800285a:	d1e5      	bne.n	8002828 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002860:	2b01      	cmp	r3, #1
 8002862:	d119      	bne.n	8002898 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	330c      	adds	r3, #12
 800286a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	e853 3f00 	ldrex	r3, [r3]
 8002872:	60bb      	str	r3, [r7, #8]
   return(result);
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	f023 0310 	bic.w	r3, r3, #16
 800287a:	647b      	str	r3, [r7, #68]	; 0x44
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	330c      	adds	r3, #12
 8002882:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002884:	61ba      	str	r2, [r7, #24]
 8002886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002888:	6979      	ldr	r1, [r7, #20]
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	e841 2300 	strex	r3, r2, [r1]
 8002890:	613b      	str	r3, [r7, #16]
   return(result);
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1e5      	bne.n	8002864 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80028a6:	bf00      	nop
 80028a8:	3754      	adds	r7, #84	; 0x54
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr

080028b0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f7ff fed3 	bl	8002676 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80028d0:	bf00      	nop
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80028d8:	b480      	push	{r7}
 80028da:	b085      	sub	sp, #20
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	2b21      	cmp	r3, #33	; 0x21
 80028ea:	d13e      	bne.n	800296a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028f4:	d114      	bne.n	8002920 <UART_Transmit_IT+0x48>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d110      	bne.n	8002920 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	461a      	mov	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002912:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	1c9a      	adds	r2, r3, #2
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	621a      	str	r2, [r3, #32]
 800291e:	e008      	b.n	8002932 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	1c59      	adds	r1, r3, #1
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6211      	str	r1, [r2, #32]
 800292a:	781a      	ldrb	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002936:	b29b      	uxth	r3, r3
 8002938:	3b01      	subs	r3, #1
 800293a:	b29b      	uxth	r3, r3
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	4619      	mov	r1, r3
 8002940:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002942:	2b00      	cmp	r3, #0
 8002944:	d10f      	bne.n	8002966 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002954:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002964:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002966:	2300      	movs	r3, #0
 8002968:	e000      	b.n	800296c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800296a:	2302      	movs	r3, #2
  }
}
 800296c:	4618      	mov	r0, r3
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr

08002976 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68da      	ldr	r2, [r3, #12]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800298c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2220      	movs	r2, #32
 8002992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f7ff fe64 	bl	8002664 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b08c      	sub	sp, #48	; 0x30
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b22      	cmp	r3, #34	; 0x22
 80029b8:	f040 80ae 	bne.w	8002b18 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c4:	d117      	bne.n	80029f6 <UART_Receive_IT+0x50>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d113      	bne.n	80029f6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80029ce:	2300      	movs	r3, #0
 80029d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	b29b      	uxth	r3, r3
 80029e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029e4:	b29a      	uxth	r2, r3
 80029e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029e8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ee:	1c9a      	adds	r2, r3, #2
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	629a      	str	r2, [r3, #40]	; 0x28
 80029f4:	e026      	b.n	8002a44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029fa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80029fc:	2300      	movs	r3, #0
 80029fe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a08:	d007      	beq.n	8002a1a <UART_Receive_IT+0x74>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10a      	bne.n	8002a28 <UART_Receive_IT+0x82>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	691b      	ldr	r3, [r3, #16]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d106      	bne.n	8002a28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a24:	701a      	strb	r2, [r3, #0]
 8002a26:	e008      	b.n	8002a3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	4619      	mov	r1, r3
 8002a52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d15d      	bne.n	8002b14 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68da      	ldr	r2, [r3, #12]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0220 	bic.w	r2, r2, #32
 8002a66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	68da      	ldr	r2, [r3, #12]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	695a      	ldr	r2, [r3, #20]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0201 	bic.w	r2, r2, #1
 8002a86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d135      	bne.n	8002b0a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	330c      	adds	r3, #12
 8002aaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	e853 3f00 	ldrex	r3, [r3]
 8002ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	f023 0310 	bic.w	r3, r3, #16
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	330c      	adds	r3, #12
 8002ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac4:	623a      	str	r2, [r7, #32]
 8002ac6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ac8:	69f9      	ldr	r1, [r7, #28]
 8002aca:	6a3a      	ldr	r2, [r7, #32]
 8002acc:	e841 2300 	strex	r3, r2, [r1]
 8002ad0:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1e5      	bne.n	8002aa4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0310 	and.w	r3, r3, #16
 8002ae2:	2b10      	cmp	r3, #16
 8002ae4:	d10a      	bne.n	8002afc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b00:	4619      	mov	r1, r3
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7ff fdc0 	bl	8002688 <HAL_UARTEx_RxEventCallback>
 8002b08:	e002      	b.n	8002b10 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7fd fb1e 	bl	800014c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	e002      	b.n	8002b1a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002b14:	2300      	movs	r3, #0
 8002b16:	e000      	b.n	8002b1a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002b18:	2302      	movs	r3, #2
  }
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3730      	adds	r7, #48	; 0x30
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
	...

08002b24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b084      	sub	sp, #16
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	430a      	orrs	r2, r1
 8002b40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002b5e:	f023 030c 	bic.w	r3, r3, #12
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6812      	ldr	r2, [r2, #0]
 8002b66:	68b9      	ldr	r1, [r7, #8]
 8002b68:	430b      	orrs	r3, r1
 8002b6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	699a      	ldr	r2, [r3, #24]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a2c      	ldr	r2, [pc, #176]	; (8002c38 <UART_SetConfig+0x114>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d103      	bne.n	8002b94 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002b8c:	f7fe fdc6 	bl	800171c <HAL_RCC_GetPCLK2Freq>
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	e002      	b.n	8002b9a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002b94:	f7fe fdae 	bl	80016f4 <HAL_RCC_GetPCLK1Freq>
 8002b98:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009a      	lsls	r2, r3, #2
 8002ba4:	441a      	add	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb0:	4a22      	ldr	r2, [pc, #136]	; (8002c3c <UART_SetConfig+0x118>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	0119      	lsls	r1, r3, #4
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	4413      	add	r3, r2
 8002bc2:	009a      	lsls	r2, r3, #2
 8002bc4:	441a      	add	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002bd0:	4b1a      	ldr	r3, [pc, #104]	; (8002c3c <UART_SetConfig+0x118>)
 8002bd2:	fba3 0302 	umull	r0, r3, r3, r2
 8002bd6:	095b      	lsrs	r3, r3, #5
 8002bd8:	2064      	movs	r0, #100	; 0x64
 8002bda:	fb00 f303 	mul.w	r3, r0, r3
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	3332      	adds	r3, #50	; 0x32
 8002be4:	4a15      	ldr	r2, [pc, #84]	; (8002c3c <UART_SetConfig+0x118>)
 8002be6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bea:	095b      	lsrs	r3, r3, #5
 8002bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bf0:	4419      	add	r1, r3
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	009a      	lsls	r2, r3, #2
 8002bfc:	441a      	add	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c08:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <UART_SetConfig+0x118>)
 8002c0a:	fba3 0302 	umull	r0, r3, r3, r2
 8002c0e:	095b      	lsrs	r3, r3, #5
 8002c10:	2064      	movs	r0, #100	; 0x64
 8002c12:	fb00 f303 	mul.w	r3, r0, r3
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	011b      	lsls	r3, r3, #4
 8002c1a:	3332      	adds	r3, #50	; 0x32
 8002c1c:	4a07      	ldr	r2, [pc, #28]	; (8002c3c <UART_SetConfig+0x118>)
 8002c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c22:	095b      	lsrs	r3, r3, #5
 8002c24:	f003 020f 	and.w	r2, r3, #15
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	440a      	add	r2, r1
 8002c2e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c30:	bf00      	nop
 8002c32:	3710      	adds	r7, #16
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40013800 	.word	0x40013800
 8002c3c:	51eb851f 	.word	0x51eb851f

08002c40 <__errno>:
 8002c40:	4b01      	ldr	r3, [pc, #4]	; (8002c48 <__errno+0x8>)
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	20000020 	.word	0x20000020

08002c4c <__libc_init_array>:
 8002c4c:	b570      	push	{r4, r5, r6, lr}
 8002c4e:	2600      	movs	r6, #0
 8002c50:	4d0c      	ldr	r5, [pc, #48]	; (8002c84 <__libc_init_array+0x38>)
 8002c52:	4c0d      	ldr	r4, [pc, #52]	; (8002c88 <__libc_init_array+0x3c>)
 8002c54:	1b64      	subs	r4, r4, r5
 8002c56:	10a4      	asrs	r4, r4, #2
 8002c58:	42a6      	cmp	r6, r4
 8002c5a:	d109      	bne.n	8002c70 <__libc_init_array+0x24>
 8002c5c:	f000 fce4 	bl	8003628 <_init>
 8002c60:	2600      	movs	r6, #0
 8002c62:	4d0a      	ldr	r5, [pc, #40]	; (8002c8c <__libc_init_array+0x40>)
 8002c64:	4c0a      	ldr	r4, [pc, #40]	; (8002c90 <__libc_init_array+0x44>)
 8002c66:	1b64      	subs	r4, r4, r5
 8002c68:	10a4      	asrs	r4, r4, #2
 8002c6a:	42a6      	cmp	r6, r4
 8002c6c:	d105      	bne.n	8002c7a <__libc_init_array+0x2e>
 8002c6e:	bd70      	pop	{r4, r5, r6, pc}
 8002c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c74:	4798      	blx	r3
 8002c76:	3601      	adds	r6, #1
 8002c78:	e7ee      	b.n	8002c58 <__libc_init_array+0xc>
 8002c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c7e:	4798      	blx	r3
 8002c80:	3601      	adds	r6, #1
 8002c82:	e7f2      	b.n	8002c6a <__libc_init_array+0x1e>
 8002c84:	080036ec 	.word	0x080036ec
 8002c88:	080036ec 	.word	0x080036ec
 8002c8c:	080036ec 	.word	0x080036ec
 8002c90:	080036f0 	.word	0x080036f0

08002c94 <memset>:
 8002c94:	4603      	mov	r3, r0
 8002c96:	4402      	add	r2, r0
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d100      	bne.n	8002c9e <memset+0xa>
 8002c9c:	4770      	bx	lr
 8002c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002ca2:	e7f9      	b.n	8002c98 <memset+0x4>

08002ca4 <_puts_r>:
 8002ca4:	b570      	push	{r4, r5, r6, lr}
 8002ca6:	460e      	mov	r6, r1
 8002ca8:	4605      	mov	r5, r0
 8002caa:	b118      	cbz	r0, 8002cb4 <_puts_r+0x10>
 8002cac:	6983      	ldr	r3, [r0, #24]
 8002cae:	b90b      	cbnz	r3, 8002cb4 <_puts_r+0x10>
 8002cb0:	f000 fa48 	bl	8003144 <__sinit>
 8002cb4:	69ab      	ldr	r3, [r5, #24]
 8002cb6:	68ac      	ldr	r4, [r5, #8]
 8002cb8:	b913      	cbnz	r3, 8002cc0 <_puts_r+0x1c>
 8002cba:	4628      	mov	r0, r5
 8002cbc:	f000 fa42 	bl	8003144 <__sinit>
 8002cc0:	4b2c      	ldr	r3, [pc, #176]	; (8002d74 <_puts_r+0xd0>)
 8002cc2:	429c      	cmp	r4, r3
 8002cc4:	d120      	bne.n	8002d08 <_puts_r+0x64>
 8002cc6:	686c      	ldr	r4, [r5, #4]
 8002cc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002cca:	07db      	lsls	r3, r3, #31
 8002ccc:	d405      	bmi.n	8002cda <_puts_r+0x36>
 8002cce:	89a3      	ldrh	r3, [r4, #12]
 8002cd0:	0598      	lsls	r0, r3, #22
 8002cd2:	d402      	bmi.n	8002cda <_puts_r+0x36>
 8002cd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002cd6:	f000 fad3 	bl	8003280 <__retarget_lock_acquire_recursive>
 8002cda:	89a3      	ldrh	r3, [r4, #12]
 8002cdc:	0719      	lsls	r1, r3, #28
 8002cde:	d51d      	bpl.n	8002d1c <_puts_r+0x78>
 8002ce0:	6923      	ldr	r3, [r4, #16]
 8002ce2:	b1db      	cbz	r3, 8002d1c <_puts_r+0x78>
 8002ce4:	3e01      	subs	r6, #1
 8002ce6:	68a3      	ldr	r3, [r4, #8]
 8002ce8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002cec:	3b01      	subs	r3, #1
 8002cee:	60a3      	str	r3, [r4, #8]
 8002cf0:	bb39      	cbnz	r1, 8002d42 <_puts_r+0x9e>
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	da38      	bge.n	8002d68 <_puts_r+0xc4>
 8002cf6:	4622      	mov	r2, r4
 8002cf8:	210a      	movs	r1, #10
 8002cfa:	4628      	mov	r0, r5
 8002cfc:	f000 f848 	bl	8002d90 <__swbuf_r>
 8002d00:	3001      	adds	r0, #1
 8002d02:	d011      	beq.n	8002d28 <_puts_r+0x84>
 8002d04:	250a      	movs	r5, #10
 8002d06:	e011      	b.n	8002d2c <_puts_r+0x88>
 8002d08:	4b1b      	ldr	r3, [pc, #108]	; (8002d78 <_puts_r+0xd4>)
 8002d0a:	429c      	cmp	r4, r3
 8002d0c:	d101      	bne.n	8002d12 <_puts_r+0x6e>
 8002d0e:	68ac      	ldr	r4, [r5, #8]
 8002d10:	e7da      	b.n	8002cc8 <_puts_r+0x24>
 8002d12:	4b1a      	ldr	r3, [pc, #104]	; (8002d7c <_puts_r+0xd8>)
 8002d14:	429c      	cmp	r4, r3
 8002d16:	bf08      	it	eq
 8002d18:	68ec      	ldreq	r4, [r5, #12]
 8002d1a:	e7d5      	b.n	8002cc8 <_puts_r+0x24>
 8002d1c:	4621      	mov	r1, r4
 8002d1e:	4628      	mov	r0, r5
 8002d20:	f000 f888 	bl	8002e34 <__swsetup_r>
 8002d24:	2800      	cmp	r0, #0
 8002d26:	d0dd      	beq.n	8002ce4 <_puts_r+0x40>
 8002d28:	f04f 35ff 	mov.w	r5, #4294967295
 8002d2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d2e:	07da      	lsls	r2, r3, #31
 8002d30:	d405      	bmi.n	8002d3e <_puts_r+0x9a>
 8002d32:	89a3      	ldrh	r3, [r4, #12]
 8002d34:	059b      	lsls	r3, r3, #22
 8002d36:	d402      	bmi.n	8002d3e <_puts_r+0x9a>
 8002d38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d3a:	f000 faa2 	bl	8003282 <__retarget_lock_release_recursive>
 8002d3e:	4628      	mov	r0, r5
 8002d40:	bd70      	pop	{r4, r5, r6, pc}
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	da04      	bge.n	8002d50 <_puts_r+0xac>
 8002d46:	69a2      	ldr	r2, [r4, #24]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	dc06      	bgt.n	8002d5a <_puts_r+0xb6>
 8002d4c:	290a      	cmp	r1, #10
 8002d4e:	d004      	beq.n	8002d5a <_puts_r+0xb6>
 8002d50:	6823      	ldr	r3, [r4, #0]
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	6022      	str	r2, [r4, #0]
 8002d56:	7019      	strb	r1, [r3, #0]
 8002d58:	e7c5      	b.n	8002ce6 <_puts_r+0x42>
 8002d5a:	4622      	mov	r2, r4
 8002d5c:	4628      	mov	r0, r5
 8002d5e:	f000 f817 	bl	8002d90 <__swbuf_r>
 8002d62:	3001      	adds	r0, #1
 8002d64:	d1bf      	bne.n	8002ce6 <_puts_r+0x42>
 8002d66:	e7df      	b.n	8002d28 <_puts_r+0x84>
 8002d68:	250a      	movs	r5, #10
 8002d6a:	6823      	ldr	r3, [r4, #0]
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	6022      	str	r2, [r4, #0]
 8002d70:	701d      	strb	r5, [r3, #0]
 8002d72:	e7db      	b.n	8002d2c <_puts_r+0x88>
 8002d74:	080036ac 	.word	0x080036ac
 8002d78:	080036cc 	.word	0x080036cc
 8002d7c:	0800368c 	.word	0x0800368c

08002d80 <puts>:
 8002d80:	4b02      	ldr	r3, [pc, #8]	; (8002d8c <puts+0xc>)
 8002d82:	4601      	mov	r1, r0
 8002d84:	6818      	ldr	r0, [r3, #0]
 8002d86:	f7ff bf8d 	b.w	8002ca4 <_puts_r>
 8002d8a:	bf00      	nop
 8002d8c:	20000020 	.word	0x20000020

08002d90 <__swbuf_r>:
 8002d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d92:	460e      	mov	r6, r1
 8002d94:	4614      	mov	r4, r2
 8002d96:	4605      	mov	r5, r0
 8002d98:	b118      	cbz	r0, 8002da2 <__swbuf_r+0x12>
 8002d9a:	6983      	ldr	r3, [r0, #24]
 8002d9c:	b90b      	cbnz	r3, 8002da2 <__swbuf_r+0x12>
 8002d9e:	f000 f9d1 	bl	8003144 <__sinit>
 8002da2:	4b21      	ldr	r3, [pc, #132]	; (8002e28 <__swbuf_r+0x98>)
 8002da4:	429c      	cmp	r4, r3
 8002da6:	d12b      	bne.n	8002e00 <__swbuf_r+0x70>
 8002da8:	686c      	ldr	r4, [r5, #4]
 8002daa:	69a3      	ldr	r3, [r4, #24]
 8002dac:	60a3      	str	r3, [r4, #8]
 8002dae:	89a3      	ldrh	r3, [r4, #12]
 8002db0:	071a      	lsls	r2, r3, #28
 8002db2:	d52f      	bpl.n	8002e14 <__swbuf_r+0x84>
 8002db4:	6923      	ldr	r3, [r4, #16]
 8002db6:	b36b      	cbz	r3, 8002e14 <__swbuf_r+0x84>
 8002db8:	6923      	ldr	r3, [r4, #16]
 8002dba:	6820      	ldr	r0, [r4, #0]
 8002dbc:	b2f6      	uxtb	r6, r6
 8002dbe:	1ac0      	subs	r0, r0, r3
 8002dc0:	6963      	ldr	r3, [r4, #20]
 8002dc2:	4637      	mov	r7, r6
 8002dc4:	4283      	cmp	r3, r0
 8002dc6:	dc04      	bgt.n	8002dd2 <__swbuf_r+0x42>
 8002dc8:	4621      	mov	r1, r4
 8002dca:	4628      	mov	r0, r5
 8002dcc:	f000 f926 	bl	800301c <_fflush_r>
 8002dd0:	bb30      	cbnz	r0, 8002e20 <__swbuf_r+0x90>
 8002dd2:	68a3      	ldr	r3, [r4, #8]
 8002dd4:	3001      	adds	r0, #1
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	60a3      	str	r3, [r4, #8]
 8002dda:	6823      	ldr	r3, [r4, #0]
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	6022      	str	r2, [r4, #0]
 8002de0:	701e      	strb	r6, [r3, #0]
 8002de2:	6963      	ldr	r3, [r4, #20]
 8002de4:	4283      	cmp	r3, r0
 8002de6:	d004      	beq.n	8002df2 <__swbuf_r+0x62>
 8002de8:	89a3      	ldrh	r3, [r4, #12]
 8002dea:	07db      	lsls	r3, r3, #31
 8002dec:	d506      	bpl.n	8002dfc <__swbuf_r+0x6c>
 8002dee:	2e0a      	cmp	r6, #10
 8002df0:	d104      	bne.n	8002dfc <__swbuf_r+0x6c>
 8002df2:	4621      	mov	r1, r4
 8002df4:	4628      	mov	r0, r5
 8002df6:	f000 f911 	bl	800301c <_fflush_r>
 8002dfa:	b988      	cbnz	r0, 8002e20 <__swbuf_r+0x90>
 8002dfc:	4638      	mov	r0, r7
 8002dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e00:	4b0a      	ldr	r3, [pc, #40]	; (8002e2c <__swbuf_r+0x9c>)
 8002e02:	429c      	cmp	r4, r3
 8002e04:	d101      	bne.n	8002e0a <__swbuf_r+0x7a>
 8002e06:	68ac      	ldr	r4, [r5, #8]
 8002e08:	e7cf      	b.n	8002daa <__swbuf_r+0x1a>
 8002e0a:	4b09      	ldr	r3, [pc, #36]	; (8002e30 <__swbuf_r+0xa0>)
 8002e0c:	429c      	cmp	r4, r3
 8002e0e:	bf08      	it	eq
 8002e10:	68ec      	ldreq	r4, [r5, #12]
 8002e12:	e7ca      	b.n	8002daa <__swbuf_r+0x1a>
 8002e14:	4621      	mov	r1, r4
 8002e16:	4628      	mov	r0, r5
 8002e18:	f000 f80c 	bl	8002e34 <__swsetup_r>
 8002e1c:	2800      	cmp	r0, #0
 8002e1e:	d0cb      	beq.n	8002db8 <__swbuf_r+0x28>
 8002e20:	f04f 37ff 	mov.w	r7, #4294967295
 8002e24:	e7ea      	b.n	8002dfc <__swbuf_r+0x6c>
 8002e26:	bf00      	nop
 8002e28:	080036ac 	.word	0x080036ac
 8002e2c:	080036cc 	.word	0x080036cc
 8002e30:	0800368c 	.word	0x0800368c

08002e34 <__swsetup_r>:
 8002e34:	4b32      	ldr	r3, [pc, #200]	; (8002f00 <__swsetup_r+0xcc>)
 8002e36:	b570      	push	{r4, r5, r6, lr}
 8002e38:	681d      	ldr	r5, [r3, #0]
 8002e3a:	4606      	mov	r6, r0
 8002e3c:	460c      	mov	r4, r1
 8002e3e:	b125      	cbz	r5, 8002e4a <__swsetup_r+0x16>
 8002e40:	69ab      	ldr	r3, [r5, #24]
 8002e42:	b913      	cbnz	r3, 8002e4a <__swsetup_r+0x16>
 8002e44:	4628      	mov	r0, r5
 8002e46:	f000 f97d 	bl	8003144 <__sinit>
 8002e4a:	4b2e      	ldr	r3, [pc, #184]	; (8002f04 <__swsetup_r+0xd0>)
 8002e4c:	429c      	cmp	r4, r3
 8002e4e:	d10f      	bne.n	8002e70 <__swsetup_r+0x3c>
 8002e50:	686c      	ldr	r4, [r5, #4]
 8002e52:	89a3      	ldrh	r3, [r4, #12]
 8002e54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002e58:	0719      	lsls	r1, r3, #28
 8002e5a:	d42c      	bmi.n	8002eb6 <__swsetup_r+0x82>
 8002e5c:	06dd      	lsls	r5, r3, #27
 8002e5e:	d411      	bmi.n	8002e84 <__swsetup_r+0x50>
 8002e60:	2309      	movs	r3, #9
 8002e62:	6033      	str	r3, [r6, #0]
 8002e64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002e68:	f04f 30ff 	mov.w	r0, #4294967295
 8002e6c:	81a3      	strh	r3, [r4, #12]
 8002e6e:	e03e      	b.n	8002eee <__swsetup_r+0xba>
 8002e70:	4b25      	ldr	r3, [pc, #148]	; (8002f08 <__swsetup_r+0xd4>)
 8002e72:	429c      	cmp	r4, r3
 8002e74:	d101      	bne.n	8002e7a <__swsetup_r+0x46>
 8002e76:	68ac      	ldr	r4, [r5, #8]
 8002e78:	e7eb      	b.n	8002e52 <__swsetup_r+0x1e>
 8002e7a:	4b24      	ldr	r3, [pc, #144]	; (8002f0c <__swsetup_r+0xd8>)
 8002e7c:	429c      	cmp	r4, r3
 8002e7e:	bf08      	it	eq
 8002e80:	68ec      	ldreq	r4, [r5, #12]
 8002e82:	e7e6      	b.n	8002e52 <__swsetup_r+0x1e>
 8002e84:	0758      	lsls	r0, r3, #29
 8002e86:	d512      	bpl.n	8002eae <__swsetup_r+0x7a>
 8002e88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002e8a:	b141      	cbz	r1, 8002e9e <__swsetup_r+0x6a>
 8002e8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002e90:	4299      	cmp	r1, r3
 8002e92:	d002      	beq.n	8002e9a <__swsetup_r+0x66>
 8002e94:	4630      	mov	r0, r6
 8002e96:	f000 fa59 	bl	800334c <_free_r>
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	6363      	str	r3, [r4, #52]	; 0x34
 8002e9e:	89a3      	ldrh	r3, [r4, #12]
 8002ea0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002ea4:	81a3      	strh	r3, [r4, #12]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	6063      	str	r3, [r4, #4]
 8002eaa:	6923      	ldr	r3, [r4, #16]
 8002eac:	6023      	str	r3, [r4, #0]
 8002eae:	89a3      	ldrh	r3, [r4, #12]
 8002eb0:	f043 0308 	orr.w	r3, r3, #8
 8002eb4:	81a3      	strh	r3, [r4, #12]
 8002eb6:	6923      	ldr	r3, [r4, #16]
 8002eb8:	b94b      	cbnz	r3, 8002ece <__swsetup_r+0x9a>
 8002eba:	89a3      	ldrh	r3, [r4, #12]
 8002ebc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002ec0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ec4:	d003      	beq.n	8002ece <__swsetup_r+0x9a>
 8002ec6:	4621      	mov	r1, r4
 8002ec8:	4630      	mov	r0, r6
 8002eca:	f000 f9ff 	bl	80032cc <__smakebuf_r>
 8002ece:	89a0      	ldrh	r0, [r4, #12]
 8002ed0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002ed4:	f010 0301 	ands.w	r3, r0, #1
 8002ed8:	d00a      	beq.n	8002ef0 <__swsetup_r+0xbc>
 8002eda:	2300      	movs	r3, #0
 8002edc:	60a3      	str	r3, [r4, #8]
 8002ede:	6963      	ldr	r3, [r4, #20]
 8002ee0:	425b      	negs	r3, r3
 8002ee2:	61a3      	str	r3, [r4, #24]
 8002ee4:	6923      	ldr	r3, [r4, #16]
 8002ee6:	b943      	cbnz	r3, 8002efa <__swsetup_r+0xc6>
 8002ee8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002eec:	d1ba      	bne.n	8002e64 <__swsetup_r+0x30>
 8002eee:	bd70      	pop	{r4, r5, r6, pc}
 8002ef0:	0781      	lsls	r1, r0, #30
 8002ef2:	bf58      	it	pl
 8002ef4:	6963      	ldrpl	r3, [r4, #20]
 8002ef6:	60a3      	str	r3, [r4, #8]
 8002ef8:	e7f4      	b.n	8002ee4 <__swsetup_r+0xb0>
 8002efa:	2000      	movs	r0, #0
 8002efc:	e7f7      	b.n	8002eee <__swsetup_r+0xba>
 8002efe:	bf00      	nop
 8002f00:	20000020 	.word	0x20000020
 8002f04:	080036ac 	.word	0x080036ac
 8002f08:	080036cc 	.word	0x080036cc
 8002f0c:	0800368c 	.word	0x0800368c

08002f10 <__sflush_r>:
 8002f10:	898a      	ldrh	r2, [r1, #12]
 8002f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f16:	4605      	mov	r5, r0
 8002f18:	0710      	lsls	r0, r2, #28
 8002f1a:	460c      	mov	r4, r1
 8002f1c:	d458      	bmi.n	8002fd0 <__sflush_r+0xc0>
 8002f1e:	684b      	ldr	r3, [r1, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	dc05      	bgt.n	8002f30 <__sflush_r+0x20>
 8002f24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	dc02      	bgt.n	8002f30 <__sflush_r+0x20>
 8002f2a:	2000      	movs	r0, #0
 8002f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f32:	2e00      	cmp	r6, #0
 8002f34:	d0f9      	beq.n	8002f2a <__sflush_r+0x1a>
 8002f36:	2300      	movs	r3, #0
 8002f38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002f3c:	682f      	ldr	r7, [r5, #0]
 8002f3e:	602b      	str	r3, [r5, #0]
 8002f40:	d032      	beq.n	8002fa8 <__sflush_r+0x98>
 8002f42:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002f44:	89a3      	ldrh	r3, [r4, #12]
 8002f46:	075a      	lsls	r2, r3, #29
 8002f48:	d505      	bpl.n	8002f56 <__sflush_r+0x46>
 8002f4a:	6863      	ldr	r3, [r4, #4]
 8002f4c:	1ac0      	subs	r0, r0, r3
 8002f4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002f50:	b10b      	cbz	r3, 8002f56 <__sflush_r+0x46>
 8002f52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002f54:	1ac0      	subs	r0, r0, r3
 8002f56:	2300      	movs	r3, #0
 8002f58:	4602      	mov	r2, r0
 8002f5a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f5c:	4628      	mov	r0, r5
 8002f5e:	6a21      	ldr	r1, [r4, #32]
 8002f60:	47b0      	blx	r6
 8002f62:	1c43      	adds	r3, r0, #1
 8002f64:	89a3      	ldrh	r3, [r4, #12]
 8002f66:	d106      	bne.n	8002f76 <__sflush_r+0x66>
 8002f68:	6829      	ldr	r1, [r5, #0]
 8002f6a:	291d      	cmp	r1, #29
 8002f6c:	d82c      	bhi.n	8002fc8 <__sflush_r+0xb8>
 8002f6e:	4a2a      	ldr	r2, [pc, #168]	; (8003018 <__sflush_r+0x108>)
 8002f70:	40ca      	lsrs	r2, r1
 8002f72:	07d6      	lsls	r6, r2, #31
 8002f74:	d528      	bpl.n	8002fc8 <__sflush_r+0xb8>
 8002f76:	2200      	movs	r2, #0
 8002f78:	6062      	str	r2, [r4, #4]
 8002f7a:	6922      	ldr	r2, [r4, #16]
 8002f7c:	04d9      	lsls	r1, r3, #19
 8002f7e:	6022      	str	r2, [r4, #0]
 8002f80:	d504      	bpl.n	8002f8c <__sflush_r+0x7c>
 8002f82:	1c42      	adds	r2, r0, #1
 8002f84:	d101      	bne.n	8002f8a <__sflush_r+0x7a>
 8002f86:	682b      	ldr	r3, [r5, #0]
 8002f88:	b903      	cbnz	r3, 8002f8c <__sflush_r+0x7c>
 8002f8a:	6560      	str	r0, [r4, #84]	; 0x54
 8002f8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002f8e:	602f      	str	r7, [r5, #0]
 8002f90:	2900      	cmp	r1, #0
 8002f92:	d0ca      	beq.n	8002f2a <__sflush_r+0x1a>
 8002f94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002f98:	4299      	cmp	r1, r3
 8002f9a:	d002      	beq.n	8002fa2 <__sflush_r+0x92>
 8002f9c:	4628      	mov	r0, r5
 8002f9e:	f000 f9d5 	bl	800334c <_free_r>
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	6360      	str	r0, [r4, #52]	; 0x34
 8002fa6:	e7c1      	b.n	8002f2c <__sflush_r+0x1c>
 8002fa8:	6a21      	ldr	r1, [r4, #32]
 8002faa:	2301      	movs	r3, #1
 8002fac:	4628      	mov	r0, r5
 8002fae:	47b0      	blx	r6
 8002fb0:	1c41      	adds	r1, r0, #1
 8002fb2:	d1c7      	bne.n	8002f44 <__sflush_r+0x34>
 8002fb4:	682b      	ldr	r3, [r5, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0c4      	beq.n	8002f44 <__sflush_r+0x34>
 8002fba:	2b1d      	cmp	r3, #29
 8002fbc:	d001      	beq.n	8002fc2 <__sflush_r+0xb2>
 8002fbe:	2b16      	cmp	r3, #22
 8002fc0:	d101      	bne.n	8002fc6 <__sflush_r+0xb6>
 8002fc2:	602f      	str	r7, [r5, #0]
 8002fc4:	e7b1      	b.n	8002f2a <__sflush_r+0x1a>
 8002fc6:	89a3      	ldrh	r3, [r4, #12]
 8002fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fcc:	81a3      	strh	r3, [r4, #12]
 8002fce:	e7ad      	b.n	8002f2c <__sflush_r+0x1c>
 8002fd0:	690f      	ldr	r7, [r1, #16]
 8002fd2:	2f00      	cmp	r7, #0
 8002fd4:	d0a9      	beq.n	8002f2a <__sflush_r+0x1a>
 8002fd6:	0793      	lsls	r3, r2, #30
 8002fd8:	bf18      	it	ne
 8002fda:	2300      	movne	r3, #0
 8002fdc:	680e      	ldr	r6, [r1, #0]
 8002fde:	bf08      	it	eq
 8002fe0:	694b      	ldreq	r3, [r1, #20]
 8002fe2:	eba6 0807 	sub.w	r8, r6, r7
 8002fe6:	600f      	str	r7, [r1, #0]
 8002fe8:	608b      	str	r3, [r1, #8]
 8002fea:	f1b8 0f00 	cmp.w	r8, #0
 8002fee:	dd9c      	ble.n	8002f2a <__sflush_r+0x1a>
 8002ff0:	4643      	mov	r3, r8
 8002ff2:	463a      	mov	r2, r7
 8002ff4:	4628      	mov	r0, r5
 8002ff6:	6a21      	ldr	r1, [r4, #32]
 8002ff8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002ffa:	47b0      	blx	r6
 8002ffc:	2800      	cmp	r0, #0
 8002ffe:	dc06      	bgt.n	800300e <__sflush_r+0xfe>
 8003000:	89a3      	ldrh	r3, [r4, #12]
 8003002:	f04f 30ff 	mov.w	r0, #4294967295
 8003006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800300a:	81a3      	strh	r3, [r4, #12]
 800300c:	e78e      	b.n	8002f2c <__sflush_r+0x1c>
 800300e:	4407      	add	r7, r0
 8003010:	eba8 0800 	sub.w	r8, r8, r0
 8003014:	e7e9      	b.n	8002fea <__sflush_r+0xda>
 8003016:	bf00      	nop
 8003018:	20400001 	.word	0x20400001

0800301c <_fflush_r>:
 800301c:	b538      	push	{r3, r4, r5, lr}
 800301e:	690b      	ldr	r3, [r1, #16]
 8003020:	4605      	mov	r5, r0
 8003022:	460c      	mov	r4, r1
 8003024:	b913      	cbnz	r3, 800302c <_fflush_r+0x10>
 8003026:	2500      	movs	r5, #0
 8003028:	4628      	mov	r0, r5
 800302a:	bd38      	pop	{r3, r4, r5, pc}
 800302c:	b118      	cbz	r0, 8003036 <_fflush_r+0x1a>
 800302e:	6983      	ldr	r3, [r0, #24]
 8003030:	b90b      	cbnz	r3, 8003036 <_fflush_r+0x1a>
 8003032:	f000 f887 	bl	8003144 <__sinit>
 8003036:	4b14      	ldr	r3, [pc, #80]	; (8003088 <_fflush_r+0x6c>)
 8003038:	429c      	cmp	r4, r3
 800303a:	d11b      	bne.n	8003074 <_fflush_r+0x58>
 800303c:	686c      	ldr	r4, [r5, #4]
 800303e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0ef      	beq.n	8003026 <_fflush_r+0xa>
 8003046:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003048:	07d0      	lsls	r0, r2, #31
 800304a:	d404      	bmi.n	8003056 <_fflush_r+0x3a>
 800304c:	0599      	lsls	r1, r3, #22
 800304e:	d402      	bmi.n	8003056 <_fflush_r+0x3a>
 8003050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003052:	f000 f915 	bl	8003280 <__retarget_lock_acquire_recursive>
 8003056:	4628      	mov	r0, r5
 8003058:	4621      	mov	r1, r4
 800305a:	f7ff ff59 	bl	8002f10 <__sflush_r>
 800305e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003060:	4605      	mov	r5, r0
 8003062:	07da      	lsls	r2, r3, #31
 8003064:	d4e0      	bmi.n	8003028 <_fflush_r+0xc>
 8003066:	89a3      	ldrh	r3, [r4, #12]
 8003068:	059b      	lsls	r3, r3, #22
 800306a:	d4dd      	bmi.n	8003028 <_fflush_r+0xc>
 800306c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800306e:	f000 f908 	bl	8003282 <__retarget_lock_release_recursive>
 8003072:	e7d9      	b.n	8003028 <_fflush_r+0xc>
 8003074:	4b05      	ldr	r3, [pc, #20]	; (800308c <_fflush_r+0x70>)
 8003076:	429c      	cmp	r4, r3
 8003078:	d101      	bne.n	800307e <_fflush_r+0x62>
 800307a:	68ac      	ldr	r4, [r5, #8]
 800307c:	e7df      	b.n	800303e <_fflush_r+0x22>
 800307e:	4b04      	ldr	r3, [pc, #16]	; (8003090 <_fflush_r+0x74>)
 8003080:	429c      	cmp	r4, r3
 8003082:	bf08      	it	eq
 8003084:	68ec      	ldreq	r4, [r5, #12]
 8003086:	e7da      	b.n	800303e <_fflush_r+0x22>
 8003088:	080036ac 	.word	0x080036ac
 800308c:	080036cc 	.word	0x080036cc
 8003090:	0800368c 	.word	0x0800368c

08003094 <std>:
 8003094:	2300      	movs	r3, #0
 8003096:	b510      	push	{r4, lr}
 8003098:	4604      	mov	r4, r0
 800309a:	e9c0 3300 	strd	r3, r3, [r0]
 800309e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80030a2:	6083      	str	r3, [r0, #8]
 80030a4:	8181      	strh	r1, [r0, #12]
 80030a6:	6643      	str	r3, [r0, #100]	; 0x64
 80030a8:	81c2      	strh	r2, [r0, #14]
 80030aa:	6183      	str	r3, [r0, #24]
 80030ac:	4619      	mov	r1, r3
 80030ae:	2208      	movs	r2, #8
 80030b0:	305c      	adds	r0, #92	; 0x5c
 80030b2:	f7ff fdef 	bl	8002c94 <memset>
 80030b6:	4b05      	ldr	r3, [pc, #20]	; (80030cc <std+0x38>)
 80030b8:	6224      	str	r4, [r4, #32]
 80030ba:	6263      	str	r3, [r4, #36]	; 0x24
 80030bc:	4b04      	ldr	r3, [pc, #16]	; (80030d0 <std+0x3c>)
 80030be:	62a3      	str	r3, [r4, #40]	; 0x28
 80030c0:	4b04      	ldr	r3, [pc, #16]	; (80030d4 <std+0x40>)
 80030c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80030c4:	4b04      	ldr	r3, [pc, #16]	; (80030d8 <std+0x44>)
 80030c6:	6323      	str	r3, [r4, #48]	; 0x30
 80030c8:	bd10      	pop	{r4, pc}
 80030ca:	bf00      	nop
 80030cc:	080034b9 	.word	0x080034b9
 80030d0:	080034db 	.word	0x080034db
 80030d4:	08003513 	.word	0x08003513
 80030d8:	08003537 	.word	0x08003537

080030dc <_cleanup_r>:
 80030dc:	4901      	ldr	r1, [pc, #4]	; (80030e4 <_cleanup_r+0x8>)
 80030de:	f000 b8af 	b.w	8003240 <_fwalk_reent>
 80030e2:	bf00      	nop
 80030e4:	0800301d 	.word	0x0800301d

080030e8 <__sfmoreglue>:
 80030e8:	b570      	push	{r4, r5, r6, lr}
 80030ea:	2568      	movs	r5, #104	; 0x68
 80030ec:	1e4a      	subs	r2, r1, #1
 80030ee:	4355      	muls	r5, r2
 80030f0:	460e      	mov	r6, r1
 80030f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80030f6:	f000 f975 	bl	80033e4 <_malloc_r>
 80030fa:	4604      	mov	r4, r0
 80030fc:	b140      	cbz	r0, 8003110 <__sfmoreglue+0x28>
 80030fe:	2100      	movs	r1, #0
 8003100:	e9c0 1600 	strd	r1, r6, [r0]
 8003104:	300c      	adds	r0, #12
 8003106:	60a0      	str	r0, [r4, #8]
 8003108:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800310c:	f7ff fdc2 	bl	8002c94 <memset>
 8003110:	4620      	mov	r0, r4
 8003112:	bd70      	pop	{r4, r5, r6, pc}

08003114 <__sfp_lock_acquire>:
 8003114:	4801      	ldr	r0, [pc, #4]	; (800311c <__sfp_lock_acquire+0x8>)
 8003116:	f000 b8b3 	b.w	8003280 <__retarget_lock_acquire_recursive>
 800311a:	bf00      	nop
 800311c:	20000470 	.word	0x20000470

08003120 <__sfp_lock_release>:
 8003120:	4801      	ldr	r0, [pc, #4]	; (8003128 <__sfp_lock_release+0x8>)
 8003122:	f000 b8ae 	b.w	8003282 <__retarget_lock_release_recursive>
 8003126:	bf00      	nop
 8003128:	20000470 	.word	0x20000470

0800312c <__sinit_lock_acquire>:
 800312c:	4801      	ldr	r0, [pc, #4]	; (8003134 <__sinit_lock_acquire+0x8>)
 800312e:	f000 b8a7 	b.w	8003280 <__retarget_lock_acquire_recursive>
 8003132:	bf00      	nop
 8003134:	2000046b 	.word	0x2000046b

08003138 <__sinit_lock_release>:
 8003138:	4801      	ldr	r0, [pc, #4]	; (8003140 <__sinit_lock_release+0x8>)
 800313a:	f000 b8a2 	b.w	8003282 <__retarget_lock_release_recursive>
 800313e:	bf00      	nop
 8003140:	2000046b 	.word	0x2000046b

08003144 <__sinit>:
 8003144:	b510      	push	{r4, lr}
 8003146:	4604      	mov	r4, r0
 8003148:	f7ff fff0 	bl	800312c <__sinit_lock_acquire>
 800314c:	69a3      	ldr	r3, [r4, #24]
 800314e:	b11b      	cbz	r3, 8003158 <__sinit+0x14>
 8003150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003154:	f7ff bff0 	b.w	8003138 <__sinit_lock_release>
 8003158:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800315c:	6523      	str	r3, [r4, #80]	; 0x50
 800315e:	4b13      	ldr	r3, [pc, #76]	; (80031ac <__sinit+0x68>)
 8003160:	4a13      	ldr	r2, [pc, #76]	; (80031b0 <__sinit+0x6c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	62a2      	str	r2, [r4, #40]	; 0x28
 8003166:	42a3      	cmp	r3, r4
 8003168:	bf08      	it	eq
 800316a:	2301      	moveq	r3, #1
 800316c:	4620      	mov	r0, r4
 800316e:	bf08      	it	eq
 8003170:	61a3      	streq	r3, [r4, #24]
 8003172:	f000 f81f 	bl	80031b4 <__sfp>
 8003176:	6060      	str	r0, [r4, #4]
 8003178:	4620      	mov	r0, r4
 800317a:	f000 f81b 	bl	80031b4 <__sfp>
 800317e:	60a0      	str	r0, [r4, #8]
 8003180:	4620      	mov	r0, r4
 8003182:	f000 f817 	bl	80031b4 <__sfp>
 8003186:	2200      	movs	r2, #0
 8003188:	2104      	movs	r1, #4
 800318a:	60e0      	str	r0, [r4, #12]
 800318c:	6860      	ldr	r0, [r4, #4]
 800318e:	f7ff ff81 	bl	8003094 <std>
 8003192:	2201      	movs	r2, #1
 8003194:	2109      	movs	r1, #9
 8003196:	68a0      	ldr	r0, [r4, #8]
 8003198:	f7ff ff7c 	bl	8003094 <std>
 800319c:	2202      	movs	r2, #2
 800319e:	2112      	movs	r1, #18
 80031a0:	68e0      	ldr	r0, [r4, #12]
 80031a2:	f7ff ff77 	bl	8003094 <std>
 80031a6:	2301      	movs	r3, #1
 80031a8:	61a3      	str	r3, [r4, #24]
 80031aa:	e7d1      	b.n	8003150 <__sinit+0xc>
 80031ac:	08003688 	.word	0x08003688
 80031b0:	080030dd 	.word	0x080030dd

080031b4 <__sfp>:
 80031b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b6:	4607      	mov	r7, r0
 80031b8:	f7ff ffac 	bl	8003114 <__sfp_lock_acquire>
 80031bc:	4b1e      	ldr	r3, [pc, #120]	; (8003238 <__sfp+0x84>)
 80031be:	681e      	ldr	r6, [r3, #0]
 80031c0:	69b3      	ldr	r3, [r6, #24]
 80031c2:	b913      	cbnz	r3, 80031ca <__sfp+0x16>
 80031c4:	4630      	mov	r0, r6
 80031c6:	f7ff ffbd 	bl	8003144 <__sinit>
 80031ca:	3648      	adds	r6, #72	; 0x48
 80031cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80031d0:	3b01      	subs	r3, #1
 80031d2:	d503      	bpl.n	80031dc <__sfp+0x28>
 80031d4:	6833      	ldr	r3, [r6, #0]
 80031d6:	b30b      	cbz	r3, 800321c <__sfp+0x68>
 80031d8:	6836      	ldr	r6, [r6, #0]
 80031da:	e7f7      	b.n	80031cc <__sfp+0x18>
 80031dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80031e0:	b9d5      	cbnz	r5, 8003218 <__sfp+0x64>
 80031e2:	4b16      	ldr	r3, [pc, #88]	; (800323c <__sfp+0x88>)
 80031e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80031e8:	60e3      	str	r3, [r4, #12]
 80031ea:	6665      	str	r5, [r4, #100]	; 0x64
 80031ec:	f000 f847 	bl	800327e <__retarget_lock_init_recursive>
 80031f0:	f7ff ff96 	bl	8003120 <__sfp_lock_release>
 80031f4:	2208      	movs	r2, #8
 80031f6:	4629      	mov	r1, r5
 80031f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80031fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003200:	6025      	str	r5, [r4, #0]
 8003202:	61a5      	str	r5, [r4, #24]
 8003204:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003208:	f7ff fd44 	bl	8002c94 <memset>
 800320c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003210:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003214:	4620      	mov	r0, r4
 8003216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003218:	3468      	adds	r4, #104	; 0x68
 800321a:	e7d9      	b.n	80031d0 <__sfp+0x1c>
 800321c:	2104      	movs	r1, #4
 800321e:	4638      	mov	r0, r7
 8003220:	f7ff ff62 	bl	80030e8 <__sfmoreglue>
 8003224:	4604      	mov	r4, r0
 8003226:	6030      	str	r0, [r6, #0]
 8003228:	2800      	cmp	r0, #0
 800322a:	d1d5      	bne.n	80031d8 <__sfp+0x24>
 800322c:	f7ff ff78 	bl	8003120 <__sfp_lock_release>
 8003230:	230c      	movs	r3, #12
 8003232:	603b      	str	r3, [r7, #0]
 8003234:	e7ee      	b.n	8003214 <__sfp+0x60>
 8003236:	bf00      	nop
 8003238:	08003688 	.word	0x08003688
 800323c:	ffff0001 	.word	0xffff0001

08003240 <_fwalk_reent>:
 8003240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003244:	4606      	mov	r6, r0
 8003246:	4688      	mov	r8, r1
 8003248:	2700      	movs	r7, #0
 800324a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800324e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003252:	f1b9 0901 	subs.w	r9, r9, #1
 8003256:	d505      	bpl.n	8003264 <_fwalk_reent+0x24>
 8003258:	6824      	ldr	r4, [r4, #0]
 800325a:	2c00      	cmp	r4, #0
 800325c:	d1f7      	bne.n	800324e <_fwalk_reent+0xe>
 800325e:	4638      	mov	r0, r7
 8003260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003264:	89ab      	ldrh	r3, [r5, #12]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d907      	bls.n	800327a <_fwalk_reent+0x3a>
 800326a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800326e:	3301      	adds	r3, #1
 8003270:	d003      	beq.n	800327a <_fwalk_reent+0x3a>
 8003272:	4629      	mov	r1, r5
 8003274:	4630      	mov	r0, r6
 8003276:	47c0      	blx	r8
 8003278:	4307      	orrs	r7, r0
 800327a:	3568      	adds	r5, #104	; 0x68
 800327c:	e7e9      	b.n	8003252 <_fwalk_reent+0x12>

0800327e <__retarget_lock_init_recursive>:
 800327e:	4770      	bx	lr

08003280 <__retarget_lock_acquire_recursive>:
 8003280:	4770      	bx	lr

08003282 <__retarget_lock_release_recursive>:
 8003282:	4770      	bx	lr

08003284 <__swhatbuf_r>:
 8003284:	b570      	push	{r4, r5, r6, lr}
 8003286:	460e      	mov	r6, r1
 8003288:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800328c:	4614      	mov	r4, r2
 800328e:	2900      	cmp	r1, #0
 8003290:	461d      	mov	r5, r3
 8003292:	b096      	sub	sp, #88	; 0x58
 8003294:	da07      	bge.n	80032a6 <__swhatbuf_r+0x22>
 8003296:	2300      	movs	r3, #0
 8003298:	602b      	str	r3, [r5, #0]
 800329a:	89b3      	ldrh	r3, [r6, #12]
 800329c:	061a      	lsls	r2, r3, #24
 800329e:	d410      	bmi.n	80032c2 <__swhatbuf_r+0x3e>
 80032a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032a4:	e00e      	b.n	80032c4 <__swhatbuf_r+0x40>
 80032a6:	466a      	mov	r2, sp
 80032a8:	f000 f96c 	bl	8003584 <_fstat_r>
 80032ac:	2800      	cmp	r0, #0
 80032ae:	dbf2      	blt.n	8003296 <__swhatbuf_r+0x12>
 80032b0:	9a01      	ldr	r2, [sp, #4]
 80032b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80032b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80032ba:	425a      	negs	r2, r3
 80032bc:	415a      	adcs	r2, r3
 80032be:	602a      	str	r2, [r5, #0]
 80032c0:	e7ee      	b.n	80032a0 <__swhatbuf_r+0x1c>
 80032c2:	2340      	movs	r3, #64	; 0x40
 80032c4:	2000      	movs	r0, #0
 80032c6:	6023      	str	r3, [r4, #0]
 80032c8:	b016      	add	sp, #88	; 0x58
 80032ca:	bd70      	pop	{r4, r5, r6, pc}

080032cc <__smakebuf_r>:
 80032cc:	898b      	ldrh	r3, [r1, #12]
 80032ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80032d0:	079d      	lsls	r5, r3, #30
 80032d2:	4606      	mov	r6, r0
 80032d4:	460c      	mov	r4, r1
 80032d6:	d507      	bpl.n	80032e8 <__smakebuf_r+0x1c>
 80032d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80032dc:	6023      	str	r3, [r4, #0]
 80032de:	6123      	str	r3, [r4, #16]
 80032e0:	2301      	movs	r3, #1
 80032e2:	6163      	str	r3, [r4, #20]
 80032e4:	b002      	add	sp, #8
 80032e6:	bd70      	pop	{r4, r5, r6, pc}
 80032e8:	466a      	mov	r2, sp
 80032ea:	ab01      	add	r3, sp, #4
 80032ec:	f7ff ffca 	bl	8003284 <__swhatbuf_r>
 80032f0:	9900      	ldr	r1, [sp, #0]
 80032f2:	4605      	mov	r5, r0
 80032f4:	4630      	mov	r0, r6
 80032f6:	f000 f875 	bl	80033e4 <_malloc_r>
 80032fa:	b948      	cbnz	r0, 8003310 <__smakebuf_r+0x44>
 80032fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003300:	059a      	lsls	r2, r3, #22
 8003302:	d4ef      	bmi.n	80032e4 <__smakebuf_r+0x18>
 8003304:	f023 0303 	bic.w	r3, r3, #3
 8003308:	f043 0302 	orr.w	r3, r3, #2
 800330c:	81a3      	strh	r3, [r4, #12]
 800330e:	e7e3      	b.n	80032d8 <__smakebuf_r+0xc>
 8003310:	4b0d      	ldr	r3, [pc, #52]	; (8003348 <__smakebuf_r+0x7c>)
 8003312:	62b3      	str	r3, [r6, #40]	; 0x28
 8003314:	89a3      	ldrh	r3, [r4, #12]
 8003316:	6020      	str	r0, [r4, #0]
 8003318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800331c:	81a3      	strh	r3, [r4, #12]
 800331e:	9b00      	ldr	r3, [sp, #0]
 8003320:	6120      	str	r0, [r4, #16]
 8003322:	6163      	str	r3, [r4, #20]
 8003324:	9b01      	ldr	r3, [sp, #4]
 8003326:	b15b      	cbz	r3, 8003340 <__smakebuf_r+0x74>
 8003328:	4630      	mov	r0, r6
 800332a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800332e:	f000 f93b 	bl	80035a8 <_isatty_r>
 8003332:	b128      	cbz	r0, 8003340 <__smakebuf_r+0x74>
 8003334:	89a3      	ldrh	r3, [r4, #12]
 8003336:	f023 0303 	bic.w	r3, r3, #3
 800333a:	f043 0301 	orr.w	r3, r3, #1
 800333e:	81a3      	strh	r3, [r4, #12]
 8003340:	89a0      	ldrh	r0, [r4, #12]
 8003342:	4305      	orrs	r5, r0
 8003344:	81a5      	strh	r5, [r4, #12]
 8003346:	e7cd      	b.n	80032e4 <__smakebuf_r+0x18>
 8003348:	080030dd 	.word	0x080030dd

0800334c <_free_r>:
 800334c:	b538      	push	{r3, r4, r5, lr}
 800334e:	4605      	mov	r5, r0
 8003350:	2900      	cmp	r1, #0
 8003352:	d043      	beq.n	80033dc <_free_r+0x90>
 8003354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003358:	1f0c      	subs	r4, r1, #4
 800335a:	2b00      	cmp	r3, #0
 800335c:	bfb8      	it	lt
 800335e:	18e4      	addlt	r4, r4, r3
 8003360:	f000 f944 	bl	80035ec <__malloc_lock>
 8003364:	4a1e      	ldr	r2, [pc, #120]	; (80033e0 <_free_r+0x94>)
 8003366:	6813      	ldr	r3, [r2, #0]
 8003368:	4610      	mov	r0, r2
 800336a:	b933      	cbnz	r3, 800337a <_free_r+0x2e>
 800336c:	6063      	str	r3, [r4, #4]
 800336e:	6014      	str	r4, [r2, #0]
 8003370:	4628      	mov	r0, r5
 8003372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003376:	f000 b93f 	b.w	80035f8 <__malloc_unlock>
 800337a:	42a3      	cmp	r3, r4
 800337c:	d90a      	bls.n	8003394 <_free_r+0x48>
 800337e:	6821      	ldr	r1, [r4, #0]
 8003380:	1862      	adds	r2, r4, r1
 8003382:	4293      	cmp	r3, r2
 8003384:	bf01      	itttt	eq
 8003386:	681a      	ldreq	r2, [r3, #0]
 8003388:	685b      	ldreq	r3, [r3, #4]
 800338a:	1852      	addeq	r2, r2, r1
 800338c:	6022      	streq	r2, [r4, #0]
 800338e:	6063      	str	r3, [r4, #4]
 8003390:	6004      	str	r4, [r0, #0]
 8003392:	e7ed      	b.n	8003370 <_free_r+0x24>
 8003394:	461a      	mov	r2, r3
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	b10b      	cbz	r3, 800339e <_free_r+0x52>
 800339a:	42a3      	cmp	r3, r4
 800339c:	d9fa      	bls.n	8003394 <_free_r+0x48>
 800339e:	6811      	ldr	r1, [r2, #0]
 80033a0:	1850      	adds	r0, r2, r1
 80033a2:	42a0      	cmp	r0, r4
 80033a4:	d10b      	bne.n	80033be <_free_r+0x72>
 80033a6:	6820      	ldr	r0, [r4, #0]
 80033a8:	4401      	add	r1, r0
 80033aa:	1850      	adds	r0, r2, r1
 80033ac:	4283      	cmp	r3, r0
 80033ae:	6011      	str	r1, [r2, #0]
 80033b0:	d1de      	bne.n	8003370 <_free_r+0x24>
 80033b2:	6818      	ldr	r0, [r3, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	4401      	add	r1, r0
 80033b8:	6011      	str	r1, [r2, #0]
 80033ba:	6053      	str	r3, [r2, #4]
 80033bc:	e7d8      	b.n	8003370 <_free_r+0x24>
 80033be:	d902      	bls.n	80033c6 <_free_r+0x7a>
 80033c0:	230c      	movs	r3, #12
 80033c2:	602b      	str	r3, [r5, #0]
 80033c4:	e7d4      	b.n	8003370 <_free_r+0x24>
 80033c6:	6820      	ldr	r0, [r4, #0]
 80033c8:	1821      	adds	r1, r4, r0
 80033ca:	428b      	cmp	r3, r1
 80033cc:	bf01      	itttt	eq
 80033ce:	6819      	ldreq	r1, [r3, #0]
 80033d0:	685b      	ldreq	r3, [r3, #4]
 80033d2:	1809      	addeq	r1, r1, r0
 80033d4:	6021      	streq	r1, [r4, #0]
 80033d6:	6063      	str	r3, [r4, #4]
 80033d8:	6054      	str	r4, [r2, #4]
 80033da:	e7c9      	b.n	8003370 <_free_r+0x24>
 80033dc:	bd38      	pop	{r3, r4, r5, pc}
 80033de:	bf00      	nop
 80033e0:	200000a8 	.word	0x200000a8

080033e4 <_malloc_r>:
 80033e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e6:	1ccd      	adds	r5, r1, #3
 80033e8:	f025 0503 	bic.w	r5, r5, #3
 80033ec:	3508      	adds	r5, #8
 80033ee:	2d0c      	cmp	r5, #12
 80033f0:	bf38      	it	cc
 80033f2:	250c      	movcc	r5, #12
 80033f4:	2d00      	cmp	r5, #0
 80033f6:	4606      	mov	r6, r0
 80033f8:	db01      	blt.n	80033fe <_malloc_r+0x1a>
 80033fa:	42a9      	cmp	r1, r5
 80033fc:	d903      	bls.n	8003406 <_malloc_r+0x22>
 80033fe:	230c      	movs	r3, #12
 8003400:	6033      	str	r3, [r6, #0]
 8003402:	2000      	movs	r0, #0
 8003404:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003406:	f000 f8f1 	bl	80035ec <__malloc_lock>
 800340a:	4921      	ldr	r1, [pc, #132]	; (8003490 <_malloc_r+0xac>)
 800340c:	680a      	ldr	r2, [r1, #0]
 800340e:	4614      	mov	r4, r2
 8003410:	b99c      	cbnz	r4, 800343a <_malloc_r+0x56>
 8003412:	4f20      	ldr	r7, [pc, #128]	; (8003494 <_malloc_r+0xb0>)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	b923      	cbnz	r3, 8003422 <_malloc_r+0x3e>
 8003418:	4621      	mov	r1, r4
 800341a:	4630      	mov	r0, r6
 800341c:	f000 f83c 	bl	8003498 <_sbrk_r>
 8003420:	6038      	str	r0, [r7, #0]
 8003422:	4629      	mov	r1, r5
 8003424:	4630      	mov	r0, r6
 8003426:	f000 f837 	bl	8003498 <_sbrk_r>
 800342a:	1c43      	adds	r3, r0, #1
 800342c:	d123      	bne.n	8003476 <_malloc_r+0x92>
 800342e:	230c      	movs	r3, #12
 8003430:	4630      	mov	r0, r6
 8003432:	6033      	str	r3, [r6, #0]
 8003434:	f000 f8e0 	bl	80035f8 <__malloc_unlock>
 8003438:	e7e3      	b.n	8003402 <_malloc_r+0x1e>
 800343a:	6823      	ldr	r3, [r4, #0]
 800343c:	1b5b      	subs	r3, r3, r5
 800343e:	d417      	bmi.n	8003470 <_malloc_r+0x8c>
 8003440:	2b0b      	cmp	r3, #11
 8003442:	d903      	bls.n	800344c <_malloc_r+0x68>
 8003444:	6023      	str	r3, [r4, #0]
 8003446:	441c      	add	r4, r3
 8003448:	6025      	str	r5, [r4, #0]
 800344a:	e004      	b.n	8003456 <_malloc_r+0x72>
 800344c:	6863      	ldr	r3, [r4, #4]
 800344e:	42a2      	cmp	r2, r4
 8003450:	bf0c      	ite	eq
 8003452:	600b      	streq	r3, [r1, #0]
 8003454:	6053      	strne	r3, [r2, #4]
 8003456:	4630      	mov	r0, r6
 8003458:	f000 f8ce 	bl	80035f8 <__malloc_unlock>
 800345c:	f104 000b 	add.w	r0, r4, #11
 8003460:	1d23      	adds	r3, r4, #4
 8003462:	f020 0007 	bic.w	r0, r0, #7
 8003466:	1ac2      	subs	r2, r0, r3
 8003468:	d0cc      	beq.n	8003404 <_malloc_r+0x20>
 800346a:	1a1b      	subs	r3, r3, r0
 800346c:	50a3      	str	r3, [r4, r2]
 800346e:	e7c9      	b.n	8003404 <_malloc_r+0x20>
 8003470:	4622      	mov	r2, r4
 8003472:	6864      	ldr	r4, [r4, #4]
 8003474:	e7cc      	b.n	8003410 <_malloc_r+0x2c>
 8003476:	1cc4      	adds	r4, r0, #3
 8003478:	f024 0403 	bic.w	r4, r4, #3
 800347c:	42a0      	cmp	r0, r4
 800347e:	d0e3      	beq.n	8003448 <_malloc_r+0x64>
 8003480:	1a21      	subs	r1, r4, r0
 8003482:	4630      	mov	r0, r6
 8003484:	f000 f808 	bl	8003498 <_sbrk_r>
 8003488:	3001      	adds	r0, #1
 800348a:	d1dd      	bne.n	8003448 <_malloc_r+0x64>
 800348c:	e7cf      	b.n	800342e <_malloc_r+0x4a>
 800348e:	bf00      	nop
 8003490:	200000a8 	.word	0x200000a8
 8003494:	200000ac 	.word	0x200000ac

08003498 <_sbrk_r>:
 8003498:	b538      	push	{r3, r4, r5, lr}
 800349a:	2300      	movs	r3, #0
 800349c:	4d05      	ldr	r5, [pc, #20]	; (80034b4 <_sbrk_r+0x1c>)
 800349e:	4604      	mov	r4, r0
 80034a0:	4608      	mov	r0, r1
 80034a2:	602b      	str	r3, [r5, #0]
 80034a4:	f7fd f948 	bl	8000738 <_sbrk>
 80034a8:	1c43      	adds	r3, r0, #1
 80034aa:	d102      	bne.n	80034b2 <_sbrk_r+0x1a>
 80034ac:	682b      	ldr	r3, [r5, #0]
 80034ae:	b103      	cbz	r3, 80034b2 <_sbrk_r+0x1a>
 80034b0:	6023      	str	r3, [r4, #0]
 80034b2:	bd38      	pop	{r3, r4, r5, pc}
 80034b4:	20000474 	.word	0x20000474

080034b8 <__sread>:
 80034b8:	b510      	push	{r4, lr}
 80034ba:	460c      	mov	r4, r1
 80034bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034c0:	f000 f8a0 	bl	8003604 <_read_r>
 80034c4:	2800      	cmp	r0, #0
 80034c6:	bfab      	itete	ge
 80034c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80034ca:	89a3      	ldrhlt	r3, [r4, #12]
 80034cc:	181b      	addge	r3, r3, r0
 80034ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80034d2:	bfac      	ite	ge
 80034d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80034d6:	81a3      	strhlt	r3, [r4, #12]
 80034d8:	bd10      	pop	{r4, pc}

080034da <__swrite>:
 80034da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034de:	461f      	mov	r7, r3
 80034e0:	898b      	ldrh	r3, [r1, #12]
 80034e2:	4605      	mov	r5, r0
 80034e4:	05db      	lsls	r3, r3, #23
 80034e6:	460c      	mov	r4, r1
 80034e8:	4616      	mov	r6, r2
 80034ea:	d505      	bpl.n	80034f8 <__swrite+0x1e>
 80034ec:	2302      	movs	r3, #2
 80034ee:	2200      	movs	r2, #0
 80034f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034f4:	f000 f868 	bl	80035c8 <_lseek_r>
 80034f8:	89a3      	ldrh	r3, [r4, #12]
 80034fa:	4632      	mov	r2, r6
 80034fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003500:	81a3      	strh	r3, [r4, #12]
 8003502:	4628      	mov	r0, r5
 8003504:	463b      	mov	r3, r7
 8003506:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800350a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800350e:	f000 b817 	b.w	8003540 <_write_r>

08003512 <__sseek>:
 8003512:	b510      	push	{r4, lr}
 8003514:	460c      	mov	r4, r1
 8003516:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800351a:	f000 f855 	bl	80035c8 <_lseek_r>
 800351e:	1c43      	adds	r3, r0, #1
 8003520:	89a3      	ldrh	r3, [r4, #12]
 8003522:	bf15      	itete	ne
 8003524:	6560      	strne	r0, [r4, #84]	; 0x54
 8003526:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800352a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800352e:	81a3      	strheq	r3, [r4, #12]
 8003530:	bf18      	it	ne
 8003532:	81a3      	strhne	r3, [r4, #12]
 8003534:	bd10      	pop	{r4, pc}

08003536 <__sclose>:
 8003536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800353a:	f000 b813 	b.w	8003564 <_close_r>
	...

08003540 <_write_r>:
 8003540:	b538      	push	{r3, r4, r5, lr}
 8003542:	4604      	mov	r4, r0
 8003544:	4608      	mov	r0, r1
 8003546:	4611      	mov	r1, r2
 8003548:	2200      	movs	r2, #0
 800354a:	4d05      	ldr	r5, [pc, #20]	; (8003560 <_write_r+0x20>)
 800354c:	602a      	str	r2, [r5, #0]
 800354e:	461a      	mov	r2, r3
 8003550:	f7fd f8a5 	bl	800069e <_write>
 8003554:	1c43      	adds	r3, r0, #1
 8003556:	d102      	bne.n	800355e <_write_r+0x1e>
 8003558:	682b      	ldr	r3, [r5, #0]
 800355a:	b103      	cbz	r3, 800355e <_write_r+0x1e>
 800355c:	6023      	str	r3, [r4, #0]
 800355e:	bd38      	pop	{r3, r4, r5, pc}
 8003560:	20000474 	.word	0x20000474

08003564 <_close_r>:
 8003564:	b538      	push	{r3, r4, r5, lr}
 8003566:	2300      	movs	r3, #0
 8003568:	4d05      	ldr	r5, [pc, #20]	; (8003580 <_close_r+0x1c>)
 800356a:	4604      	mov	r4, r0
 800356c:	4608      	mov	r0, r1
 800356e:	602b      	str	r3, [r5, #0]
 8003570:	f7fd f8b1 	bl	80006d6 <_close>
 8003574:	1c43      	adds	r3, r0, #1
 8003576:	d102      	bne.n	800357e <_close_r+0x1a>
 8003578:	682b      	ldr	r3, [r5, #0]
 800357a:	b103      	cbz	r3, 800357e <_close_r+0x1a>
 800357c:	6023      	str	r3, [r4, #0]
 800357e:	bd38      	pop	{r3, r4, r5, pc}
 8003580:	20000474 	.word	0x20000474

08003584 <_fstat_r>:
 8003584:	b538      	push	{r3, r4, r5, lr}
 8003586:	2300      	movs	r3, #0
 8003588:	4d06      	ldr	r5, [pc, #24]	; (80035a4 <_fstat_r+0x20>)
 800358a:	4604      	mov	r4, r0
 800358c:	4608      	mov	r0, r1
 800358e:	4611      	mov	r1, r2
 8003590:	602b      	str	r3, [r5, #0]
 8003592:	f7fd f8ab 	bl	80006ec <_fstat>
 8003596:	1c43      	adds	r3, r0, #1
 8003598:	d102      	bne.n	80035a0 <_fstat_r+0x1c>
 800359a:	682b      	ldr	r3, [r5, #0]
 800359c:	b103      	cbz	r3, 80035a0 <_fstat_r+0x1c>
 800359e:	6023      	str	r3, [r4, #0]
 80035a0:	bd38      	pop	{r3, r4, r5, pc}
 80035a2:	bf00      	nop
 80035a4:	20000474 	.word	0x20000474

080035a8 <_isatty_r>:
 80035a8:	b538      	push	{r3, r4, r5, lr}
 80035aa:	2300      	movs	r3, #0
 80035ac:	4d05      	ldr	r5, [pc, #20]	; (80035c4 <_isatty_r+0x1c>)
 80035ae:	4604      	mov	r4, r0
 80035b0:	4608      	mov	r0, r1
 80035b2:	602b      	str	r3, [r5, #0]
 80035b4:	f7fd f8a9 	bl	800070a <_isatty>
 80035b8:	1c43      	adds	r3, r0, #1
 80035ba:	d102      	bne.n	80035c2 <_isatty_r+0x1a>
 80035bc:	682b      	ldr	r3, [r5, #0]
 80035be:	b103      	cbz	r3, 80035c2 <_isatty_r+0x1a>
 80035c0:	6023      	str	r3, [r4, #0]
 80035c2:	bd38      	pop	{r3, r4, r5, pc}
 80035c4:	20000474 	.word	0x20000474

080035c8 <_lseek_r>:
 80035c8:	b538      	push	{r3, r4, r5, lr}
 80035ca:	4604      	mov	r4, r0
 80035cc:	4608      	mov	r0, r1
 80035ce:	4611      	mov	r1, r2
 80035d0:	2200      	movs	r2, #0
 80035d2:	4d05      	ldr	r5, [pc, #20]	; (80035e8 <_lseek_r+0x20>)
 80035d4:	602a      	str	r2, [r5, #0]
 80035d6:	461a      	mov	r2, r3
 80035d8:	f7fd f8a1 	bl	800071e <_lseek>
 80035dc:	1c43      	adds	r3, r0, #1
 80035de:	d102      	bne.n	80035e6 <_lseek_r+0x1e>
 80035e0:	682b      	ldr	r3, [r5, #0]
 80035e2:	b103      	cbz	r3, 80035e6 <_lseek_r+0x1e>
 80035e4:	6023      	str	r3, [r4, #0]
 80035e6:	bd38      	pop	{r3, r4, r5, pc}
 80035e8:	20000474 	.word	0x20000474

080035ec <__malloc_lock>:
 80035ec:	4801      	ldr	r0, [pc, #4]	; (80035f4 <__malloc_lock+0x8>)
 80035ee:	f7ff be47 	b.w	8003280 <__retarget_lock_acquire_recursive>
 80035f2:	bf00      	nop
 80035f4:	2000046c 	.word	0x2000046c

080035f8 <__malloc_unlock>:
 80035f8:	4801      	ldr	r0, [pc, #4]	; (8003600 <__malloc_unlock+0x8>)
 80035fa:	f7ff be42 	b.w	8003282 <__retarget_lock_release_recursive>
 80035fe:	bf00      	nop
 8003600:	2000046c 	.word	0x2000046c

08003604 <_read_r>:
 8003604:	b538      	push	{r3, r4, r5, lr}
 8003606:	4604      	mov	r4, r0
 8003608:	4608      	mov	r0, r1
 800360a:	4611      	mov	r1, r2
 800360c:	2200      	movs	r2, #0
 800360e:	4d05      	ldr	r5, [pc, #20]	; (8003624 <_read_r+0x20>)
 8003610:	602a      	str	r2, [r5, #0]
 8003612:	461a      	mov	r2, r3
 8003614:	f7fd f826 	bl	8000664 <_read>
 8003618:	1c43      	adds	r3, r0, #1
 800361a:	d102      	bne.n	8003622 <_read_r+0x1e>
 800361c:	682b      	ldr	r3, [r5, #0]
 800361e:	b103      	cbz	r3, 8003622 <_read_r+0x1e>
 8003620:	6023      	str	r3, [r4, #0]
 8003622:	bd38      	pop	{r3, r4, r5, pc}
 8003624:	20000474 	.word	0x20000474

08003628 <_init>:
 8003628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800362a:	bf00      	nop
 800362c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800362e:	bc08      	pop	{r3}
 8003630:	469e      	mov	lr, r3
 8003632:	4770      	bx	lr

08003634 <_fini>:
 8003634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003636:	bf00      	nop
 8003638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800363a:	bc08      	pop	{r3}
 800363c:	469e      	mov	lr, r3
 800363e:	4770      	bx	lr
